{"runs":[{"artifacts":[{"location":{"uri":"java/path-traversal-file-read.java"}},{"location":{"uri":"java/cipher-padding-oracle.java"}}],"results":[{"fixes":[],"level":"error","locations":[{"physicalLocation":{"artifactLocation":{"uri":"java/path-traversal-file-read.java"},"region":{"endColumn":56,"endLine":7,"startColumn":51,"startLine":7}}}],"message":{"text":"Path traversal using an un-sanitized value"},"partialFingerprints":{"DATADOG_FINGERPRINT":"9c5cbba33cd8294e05ad99407bb449f33e45159de44e72dc3e99390f524d083e"},"properties":{"tags":["DATADOG_CATEGORY:SECURITY","CWE:22"]},"ruleId":"java-security/path-traversal-file-read","ruleIndex":6},{"codeFlows":[{"threadFlows":[{"locations":[{"importance":"essential","location":{"physicalLocation":{"artifactLocation":{"uri":"java/path-traversal-file-read.java"},"region":{"endColumn":56,"endLine":7,"startColumn":51,"startLine":7}}}},{"importance":"essential","location":{"physicalLocation":{"artifactLocation":{"uri":"java/path-traversal-file-read.java"},"region":{"endColumn":74,"endLine":6,"startColumn":69,"startLine":6}}}}]}]}],"fixes":[],"level":"warning","locations":[{"physicalLocation":{"artifactLocation":{"uri":"java/path-traversal-file-read.java"},"region":{"endColumn":56,"endLine":7,"startColumn":51,"startLine":7}}}],"message":{"text":"Potential path traversal vulnerability"},"partialFingerprints":{"DATADOG_FINGERPRINT":"62fdad2cd28d5f6cdada480a040ea40e3aad3f6b17f807323cf54d33e93d8732"},"properties":{"tags":["DATADOG_CATEGORY:SECURITY","CWE:22"]},"ruleId":"java-security/path-traversal","ruleIndex":54},{"fixes":[{"artifactChanges":[{"artifactLocation":{"uri":"java/cipher-padding-oracle.java"},"replacements":[{"deletedRegion":{"endColumn":60,"endLine":4,"startColumn":40,"startLine":4},"insertedContent":{"text":"AES/GCM/NoPadding"}}]}],"description":{"text":"use NoPadding instead"}}],"level":"error","locations":[{"physicalLocation":{"artifactLocation":{"uri":"java/cipher-padding-oracle.java"},"region":{"endColumn":60,"endLine":4,"startColumn":40,"startLine":4}}}],"message":{"text":"Cipher is susceptible to Padding Oracle"},"partialFingerprints":{"DATADOG_FINGERPRINT":"8f2a55cb9c8343b89398d1e969ec0627089b636c3e528b72dfa799be31800f51"},"properties":{"tags":["DATADOG_CATEGORY:SECURITY","CWE:326"]},"ruleId":"java-security/cipher-padding-oracle","ruleIndex":32},{"fixes":[{"artifactChanges":[{"artifactLocation":{"uri":"java/cipher-padding-oracle.java"},"replacements":[{"deletedRegion":{"endColumn":73,"endLine":10,"startColumn":53,"startLine":10},"insertedContent":{"text":"AES/GCM/NoPadding"}}]}],"description":{"text":"use NoPadding instead"}}],"level":"error","locations":[{"physicalLocation":{"artifactLocation":{"uri":"java/cipher-padding-oracle.java"},"region":{"endColumn":73,"endLine":10,"startColumn":53,"startLine":10}}}],"message":{"text":"Cipher is susceptible to Padding Oracle"},"partialFingerprints":{"DATADOG_FINGERPRINT":"3bbcda66b636976b8f443aab9425befffd9f1b0e49fb3ed6ed26cdcbd822e884"},"properties":{"tags":["DATADOG_CATEGORY:SECURITY","CWE:326"]},"ruleId":"java-security/cipher-padding-oracle","ruleIndex":32}],"tool":{"driver":{"informationUri":"https://www.datadoghq.com","name":"datadog-static-analyzer","properties":{"tags":["DATADOG_DIFF_AWARE_CONFIG_DIGEST:2d37996553eb2f56bc6bba6e48b5b2db508c406c773827388bc8f9c868148b80","DATADOG_EXECUTION_TIME_SECS:0","DATADOG_DIFF_AWARE_ENABLED:false"]},"rules":[{"fullDescription":{"text":"Ensure that certain words are not used in the codebase and suggest alternatives when appropriate.\n\nExamples of alternative suggestions:\n\n-   `blacklist` with `denylist`\n-   `whitelist` with `allowlist`\n-   `master` with `primary`\n-   `slave` with `secondary`"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-inclusive/function-definition","id":"java-inclusive/function-definition","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:"]},"shortDescription":{"text":"Check function definition language"}},{"fullDescription":{"text":"Ensure that certain words are not used in the codebase and suggest alternatives when appropriate.\n\nExamples of alternative suggestions:\n\n-   `blacklist` with `denylist`\n-   `whitelist` with `allowlist`\n-   `master` with `primary`\n-   `slave` with `secondary`"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-inclusive/class-definition","id":"java-inclusive/class-definition","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:"]},"shortDescription":{"text":"Check class definition language"}},{"fullDescription":{"text":"Ensure that certain words are not used in the codebase and suggest alternatives when appropriate.\n\nExamples of alternative suggestions:\n\n-   `blacklist` with `denylist`\n-   `whitelist` with `allowlist`\n-   `master` with `primary`\n-   `slave` with `secondary`"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-inclusive/variable-assignment","id":"java-inclusive/variable-assignment","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:"]},"shortDescription":{"text":"Check variable assignment language"}},{"fullDescription":{"text":"Sensitive information should not be written in cleartext in code. This would leak secrets to unauthorized entities. Instead of writing secrets directly into the code, store the secrets in a secure vault or in environment variables. Make sure you also rotate secrets periodically.\n\n#### Learn More\n\n - [CWE-312: Cleartext Storage of Sensitive Information](https://cwe.mitre.org/data/definitions/312.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/hardcoded-crypto-key","id":"java-security/hardcoded-crypto-key","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:312"]},"shortDescription":{"text":"Secret should not be hardcoded in code"}},{"fullDescription":{"text":"The initialization vector (IV) for a cryptographic operation must be random and not statically declared. Instead of using a static initialization vector, use the `SecureRandom` class that will initialize your vector with real random values.\n\n#### Learn More\n\n - [`SecureRandom` documentation](https://docs.oracle.com/javase/8/docs/api/java/security/SecureRandom.html)\n - [CWE-1204: Generation of Weak Initialization Vector (IV)](https://cwe.mitre.org/data/definitions/1204.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/random-iv","id":"java-security/random-iv","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:1204"]},"shortDescription":{"text":"Use a randomly-generated IV"}},{"fullDescription":{"text":"Do not use hardcoded secrets. Instead, use secrets coming from a vault and a secure source.\n\n#### Learn More\n\n - [CWE-798 - Use of hardcoded credentials](https://cwe.mitre.org/data/definitions/798.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/algorithm-no-hardcoded-secret","id":"java-security/algorithm-no-hardcoded-secret","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:798"]},"shortDescription":{"text":"No hardcoded secret with algorithm methods"}},{"fullDescription":{"text":"The filename of the file being opened comes from an input parameter. If an unfiltered parameter is passed to the API, any location on the filesystem can be read.\n\n#### Learn More\n\n - [Potential File Traversal](https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN)\n - [CWE-22 - Improper Limitation of a Pathname to a Restricted Directory](https://cwe.mitre.org/data/definitions/22.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/path-traversal-file-read","id":"java-security/path-traversal-file-read","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:22"]},"shortDescription":{"text":"Potential path traversal from request"}},{"fullDescription":{"text":"Never use the `Random` class to generate secrets. Instead, use the `SecureRandom` class.\n\n#### Learn More\n\n - [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator](https://cwe.mitre.org/data/definitions/338.html)\n - [Predictable pseudorandom number generator](https://find-sec-bugs.github.io/bugs.htm#PREDICTABLE_RANDOM)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/no-pseudo-random-secret","id":"java-security/no-pseudo-random-secret","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:338"]},"shortDescription":{"text":"Do not use a pseudo-random number to generate a secret"}},{"fullDescription":{"text":"A `HostnameVerifier` implementation should never just return `true`.\n\n#### Learn More\n\n - [HostnameVerifier that accept any signed certificates](https://find-sec-bugs.github.io/bugs.htm#WEAK_HOSTNAME_VERIFIER)\n - [CWE-295: Improper Certificate Validation](https://cwe.mitre.org/data/definitions/295.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/hostname-verifier-true","id":"java-security/hostname-verifier-true","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:295"]},"shortDescription":{"text":"HostnameVerifier should check certificates"}},{"fullDescription":{"text":"The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions within seconds on a computer with a 2.6 GHz Pentium 4 processor. Further, there is also a chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using off-the-shelf computing hardware.\n\n#### Learn More\n\n - [CWE-328: Use of Weak Hash](https://cwe.mitre.org/data/definitions/328.html)\n - [On Collisions for MD5](https://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/weak-message-digest-md5","id":"java-security/weak-message-digest-md5","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:328"]},"shortDescription":{"text":"MD2, MD4, and MD5 are weak hash functions"}},{"fullDescription":{"text":"SHA-1 may only be used for digital signature generation where specifically allowed by NIST protocol-specific guidance. For all other applications, _SHA-1 shall not be used for digital signature generation. For digital signature verification, _SHA-1 is allowed for legacy-use.\n\nDatadog recommends using the following protocols: SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256.\n\n#### Learn More\n\n - [CWE-328: Use of Weak Hash](https://cwe.mitre.org/data/definitions/328.html)\n - [NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf)\n - [SHA-1 is a weak hash function](https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_SHA1)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/weak-message-digest-sha1","id":"java-security/weak-message-digest-sha1","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:328"]},"shortDescription":{"text":"SHA-1 is a weak hash function"}},{"fullDescription":{"text":"Do not use `\"SSL\"` as it uses an old protocol. Use `\"TLS\"` instead.\n\n#### Learn More\n\n - [Difference between SSL and TLS](https://serverfault.com/questions/64484/functional-implications-of-differences-in-ssl-and-tls/368574#368574)\n - [Weak SSL Context](https://find-sec-bugs.github.io/bugs.htm#SSL_CONTEXT)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/ssl-context","id":"java-security/ssl-context","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:"]},"shortDescription":{"text":"Do not use weak SSL context"}},{"fullDescription":{"text":"DefaultHttpClient with default constructor is not compatible with TLS 1.2. Make sure your HTTP client support advanced encryption protocols.\n\n#### Learn more\n\n - [DefaultHttpClient with default constructor is not compatible with TLS 1.2 ](https://find-sec-bugs.github.io/bugs.htm#SSL_CONTEXT)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/default-http-client-def-cons","id":"java-security/default-http-client-def-cons","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:326"]},"shortDescription":{"text":"DefaultHttpClient with default constructor is not secure"}},{"fullDescription":{"text":"Avoid custom digest. Datadog recommends using existing digests that are proven to be secure. [NIST](https://csrc.nist.gov/projects/hash-functions) recommends the use of SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, or SHA-512/256.\n\n#### Learn More\n\n - [Hash functions from NIST](https://csrc.nist.gov/projects/hash-functions)\n - [Message digest is custom](https://find-sec-bugs.github.io/bugs.htm#CUSTOM_MESSAGE_DIGEST)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/message-digest-custom","id":"java-security/message-digest-custom","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:328"]},"shortDescription":{"text":"Do not use custom digest"}},{"fullDescription":{"text":"Systems may be vulnerable to an XML External Entity attack when they process XML from untrusted sources.\n\n#### Learn More\n\n - [CWE-611: Improper Restriction of XML External Entity Reference](https://cwe.mitre.org/data/definitions/611.html)\n - [XML parsing vulnerable to XXE (XMLStreamReader)](https://find-sec-bugs.github.io/bugs.htm#XXE_XMLSTREAMREADER)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/xml-parsing-xee","id":"java-security/xml-parsing-xee","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:611"]},"shortDescription":{"text":"XML parsing vulnerable to XEE"}},{"fullDescription":{"text":"Your code may be vulnerable XML if you process XML from an untrusted source. Make sure to enable secure processing when you process XML data.\n\nFor `DocumentBuilderFactory`, make sure you set `XMLConstants.FEATURE_SECURE_PROCESSING` to true.\n\n#### Learn More\n\n - [XML parsing vulnerable to XXE (XPathExpression)](https://find-sec-bugs.github.io/bugs.htm#XXE_XPATH)\n - [CWE-611: Improper Restriction of XML External Entity Reference](https://cwe.mitre.org/data/definitions/611.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/xml-parsing-xxe-xpath","id":"java-security/xml-parsing-xxe-xpath","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:611"]},"shortDescription":{"text":"XML parsing vulnerable to XXE for XPath"}},{"fullDescription":{"text":"Your code may be vulnerable XML if you process XML from an untrusted source. Make sure to enable secure processing when you process XML data.\n\nThis rule is to check SAX parsers.\n\nFor `DocumentBuilderFactory`, make sure you set `XMLConstants.FEATURE_SECURE_PROCESSING` to true.\n\n#### Learn More\n\n - [XML parsing vulnerable to XXE (SAX Parser)](https://find-sec-bugs.github.io/bugs.htm#XXE_SAXPARSER)\n - [CWE-611: Improper Restriction of XML External Entity Reference](https://cwe.mitre.org/data/definitions/611.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/xml-parsing-xxe-saxparser","id":"java-security/xml-parsing-xxe-saxparser","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:611"]},"shortDescription":{"text":"XML parsing vulnerable to XXE for SAX Parsers"}},{"fullDescription":{"text":"Your code may be vulnerable XML if you process XML from an untrusted source. Make sure to enable secure processing when you process XML data.\n\nThis rule is to check XML Readers.\n\nFor `DocumentBuilderFactory`, make sure you set `XMLConstants.FEATURE_SECURE_PROCESSING` to true.\n\n#### Learn More\n\n - [XML parsing vulnerable to XXE (XML Reader)](https://find-sec-bugs.github.io/bugs.htm#XXE_XMLREADER)\n - [CWE-611: Improper Restriction of XML External Entity Reference](https://cwe.mitre.org/data/definitions/611.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/xml-parsing-xxe-xmlreader","id":"java-security/xml-parsing-xxe-xmlreader","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:611"]},"shortDescription":{"text":"XML parsing vulnerable to XXE for XML Reader"}},{"fullDescription":{"text":"Your code may be vulnerable XML if you process XML from an untrusted source. Make sure to enable secure processing when you process XML data.\n\nFor `TransformerFactory `, make sure you set `XMLConstants.FEATURE_SECURE_PROCESSING` to true.\n\n#### Learn More\n\n - [XML parsing vulnerable to XXE (TransformerFactory)](https://find-sec-bugs.github.io/bugs.htm#XXE_DTD_TRANSFORM_FACTORY)\n - [CWE-611: Improper Restriction of XML External Entity Reference](https://cwe.mitre.org/data/definitions/611.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/xml-parsing-xxe-transformer","id":"java-security/xml-parsing-xxe-transformer","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:611"]},"shortDescription":{"text":"XML parsing vulnerable to XXE for TransformerFactory"}},{"fullDescription":{"text":"Classes that contain methods annotated with `RequestMapping` are by default mapped to all the HTTP request methods. \n\nSpring Security's CSRF protection is not enabled by default for the HTTP request methods `GET`, `HEAD`, `TRACE`, and `OPTIONS`.\n\nFor this reason, requests or routes with `RequestMapping`, and not narrowing the mapping to the HTTP request methods `POST`, `PUT`, `DELETE`, or `PATCH`, makes them vulnerable to CSRF attacks.\n\n#### Learn More\n\n - [Spring CSRF unrestricted RequestMapping](https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/spring-csrf-requestmapping","id":"java-security/spring-csrf-requestmapping","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:352"]},"shortDescription":{"text":"Spring CSRF unrestricted RequestMapping"}},{"fullDescription":{"text":"The parameter of the SQL query should be properly escaped and validated.\n\n#### Learn More\n\n - [CWE-89: Improper Neutralization of Special Elements used in an SQL Command](https://cwe.mitre.org/data/definitions/89.html)\n - [Potential Injection](https://find-sec-bugs.github.io/bugs.htm#CUSTOM_INJECTION)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/potential-sql-injection","id":"java-security/potential-sql-injection","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:89"]},"shortDescription":{"text":"SQL injection in SqlUtil.execQuery"}},{"fullDescription":{"text":"When issuing a SQL query with Turbine, make sure you do not build your query manually and use all the utility functions available with the library.\n\n#### Learn More\n\n - [CWE-89: Improper Neutralization of Special Elements used in an SQL Command](https://cwe.mitre.org/data/definitions/89.html)\n - [Potential SQL Injection with Turbine](https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION_TURBINE)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/sql-injection-turbine","id":"java-security/sql-injection-turbine","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:89"]},"shortDescription":{"text":"SQL injection in BasePeer"}},{"fullDescription":{"text":"Never build a SQL query by concatenating string. Instead, make sure that you use Hibernate functionalities to prevent SQL Injection.\n\n#### Learn More\n\n - [CWE-89: Improper Neutralization of Special Elements used in an SQL Command](https://cwe.mitre.org/data/definitions/89.html)\n - [Potential SQL Injection with Hibernate](https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION_HIBERNATE)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/sql-injection-hibernate","id":"java-security/sql-injection-hibernate","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:89"]},"shortDescription":{"text":"SQL injection in Hibernate"}},{"fullDescription":{"text":"A Spring expression is built on a dynamic value using an input string. The source should be checked to ensure there is no injection.\n\n#### Learn More\n\n - [CWE-94: Improper Control of Generation of Code ('Code Injection')](https://cwe.mitre.org/data/definitions/94.html)\n - [Beware of the Magic SpEL(L) – Part 2 (CVE-2018-1260)](https://www.gosecure.net/blog/2018/05/17/beware-of-the-magic-spell-part-2-cve-2018-1260/)\n - [Potential code injection when using Spring Expression](https://find-sec-bugs.github.io/bugs.htm#SPEL_INJECTION)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/spring-expression-injection","id":"java-security/spring-expression-injection","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:94"]},"shortDescription":{"text":"Potential code injection when using Spring Expression"}},{"fullDescription":{"text":"An expression for GroovyScript is built with a dynamic value. The source should be checked and filtered to prevent any user-input from the script.\n\n#### Learn More\n\n - [Potential code injection when using GroovyShell](https://find-sec-bugs.github.io/bugs.htm#GROOVY_SHELL)\n - [Example of Vulnerability](https://github.com/welk1n/exploiting-groovy-in-Java/)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/groovyshell-code-injection","id":"java-security/groovyshell-code-injection","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:94"]},"shortDescription":{"text":"Potential code injection when using GroovyShell"}},{"fullDescription":{"text":"Do not initiate socket on unencrypted ports. Use secure alternatives.\n\n#### Learn More\n\n - [CWE-319: Cleartext Transmission of Sensitive Information](https://cwe.mitre.org/data/definitions/319.html)\n - [Use of Unencrypted Socket](https://find-sec-bugs.github.io/bugs.htm#UNENCRYPTED_SOCKET)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/unencrypted-socket","id":"java-security/unencrypted-socket","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:319"]},"shortDescription":{"text":"Use of socket on HTTP port"}},{"fullDescription":{"text":"DES is considered strong ciphers for modern applications. NIST recommends the usage of AES block ciphers instead of DES.\n\n#### Learn More\n\n - [DES is insecure](https://find-sec-bugs.github.io/bugs.htm#DES_USAGE)\n - [CWE-326 - Inadequate Encryption Strength](https://cwe.mitre.org/data/definitions/326.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/no-des-cipher","id":"java-security/no-des-cipher","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:326"]},"shortDescription":{"text":"Do not use DES"}},{"fullDescription":{"text":"You should never use RSA without padding. RSA should always be used with some padding to prevent any weak encryption.\n\n\n#### Learn More\n\n - [RSA with no padding is insecure](https://find-sec-bugs.github.io/bugs.htm#RSA_NO_PADDING)\n - [CWE-780: Use of RSA Algorithm without OAEP](https://cwe.mitre.org/data/definitions/780.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/no-rsa-no-padding","id":"java-security/no-rsa-no-padding","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:780"]},"shortDescription":{"text":"RSA with no padding is insecure"}},{"fullDescription":{"text":"When using Blowfish, use at least 128 bits of entropy to prevent potential vulnerabilities.\n\n#### Learn More\n\n - [Wikipedia - Blowfish weaknesses](https://en.wikipedia.org/wiki/Blowfish_(cipher)#Weakness_and_successors)\n - [CWE-326: Inadequate Encryption Strength](https://cwe.mitre.org/data/definitions/326.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/blowfish-short-key","id":"java-security/blowfish-short-key","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:326"]},"shortDescription":{"text":"Blowfish should use a large key"}},{"fullDescription":{"text":"When using RSA, use keys with at least 2048 bits.\n\n#### Learn More\n\n - [CWE-326: Inadequate Encryption Strength](https://cwe.mitre.org/data/definitions/326.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/rsa-short-key","id":"java-security/rsa-short-key","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:326"]},"shortDescription":{"text":"RSA should use a long key"}},{"fullDescription":{"text":"Do not use unvalidated redirect. Always check the redirect URL coming from a request.\n\n#### Learn More\n\n - [Unvalidated Redirect](https://find-sec-bugs.github.io/bugs.htm#UNVALIDATED_REDIRECT)\n - [CWE-601 - URL Redirection to Untrusted Site](https://cwe.mitre.org/data/definitions/601.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/unvalidated-redirect","id":"java-security/unvalidated-redirect","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:601"]},"shortDescription":{"text":"Do not use unvalidated request"}},{"fullDescription":{"text":"Electronic Code Book (ECB) is insecure. Datadog recommends using other mechanisms.\n\n#### Learn More\n\n - [ECB is insecure](https://find-sec-bugs.github.io/bugs.htm#ECB_MODE)\n - [CWE-326 - Inadequate Encryption Strength](https://cwe.mitre.org/data/definitions/326.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/aes-ecb-insecure","id":"java-security/aes-ecb-insecure","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:326"]},"shortDescription":{"text":"ECB mode is insecure"}},{"fullDescription":{"text":"CBC mode used with `PKCS5Padding` is susceptible to padding attacks. Datadog recommends using `AES/GCM/NoPadding`.\n\n#### Learn More\n\n - [Cipher is susceptible to Padding Oracle](https://find-sec-bugs.github.io/bugs.htm#PADDING_ORACLE)\n - [CWE-326 - Inadequate Encryption Strength](https://cwe.mitre.org/data/definitions/326.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/cipher-padding-oracle","id":"java-security/cipher-padding-oracle","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:326"]},"shortDescription":{"text":"ECB mode is insecure"}},{"fullDescription":{"text":"Do not use `NullCipher` as it does not transform the plaintext and the cipher text is identical to the text. Use real security measures for your application.\n\n#### Learn More\n\n - [Javadoc NullCipher](https://docs.oracle.com/javase/8/docs/api///javax/crypto/NullCipher.html)\n - [CWE-327: Use of a Broken or Risky Cryptographic Algorithm](https://cwe.mitre.org/data/definitions/327.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/avoid-null-cipher","id":"java-security/avoid-null-cipher","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:327"]},"shortDescription":{"text":"Avoid NullCipher"}},{"fullDescription":{"text":"Never give write access to other users.\n\n#### Learn More\n\n - [Linux Privileges Escalation Guide](https://payatu.com/blog/a-guide-to-linux-privilege-escalation/)\n - [CWE-732](https://cwe.mitre.org/data/definitions/732.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/files-permissions","id":"java-security/files-permissions","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:732"]},"shortDescription":{"text":"Do not give write access to others"}},{"fullDescription":{"text":"Using `Integer.toHexString()` may trim leading zeroes and other missing information. This mistake weakens the hash value computed since it introduces more collisions. For example, the hash values \"0x0123\" and \"0x1203\" would both output as \"123\" for the above function.\n"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/bad-hexa-concatenation","id":"java-security/bad-hexa-concatenation","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:704"]},"shortDescription":{"text":"Bad hexadecimal concatenation"}},{"fullDescription":{"text":"Deserialization of untrusted data can lead to undesired code execution. Use `activateDefaultTyping` to prevent deserialization into random classes.\n\n#### Learn More\n\n - [ObjectMapper JavaDoc](https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-databind/2.9.8/com/fasterxml/jackson/databind/ObjectMapper.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/json-unsafe-deserialization","id":"java-security/json-unsafe-deserialization","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:502"]},"shortDescription":{"text":"Avoid unsafe deserialization"}},{"fullDescription":{"text":"Ignoring comments in SAML may lead to vulnerabilities.\n\n#### Learn More\n\n - [Duo Finds SAML Vulnerabilities Affecting Multiple Implementations\n](https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations)\n- [Spring SAML Vulnerability](https://spring.io/blog/2018/03/01/spring-security-saml-and-this-week-s-saml-vulnerability)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/ignore-saml-comment","id":"java-security/ignore-saml-comment","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:"]},"shortDescription":{"text":"Ignore SAML comments"}},{"fullDescription":{"text":"Do not concatenate HTTP parameters. Instead, use a proper API to set each parameter.\n\n\n#### Learn More\n\n - [HTTP Parameter Pollution](https://capec.mitre.org/data/definitions/460.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/http-parameter-pollution","id":"java-security/http-parameter-pollution","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:"]},"shortDescription":{"text":"Prevent HTTP parameter pollution"}},{"fullDescription":{"text":"When a program establish an SMTP connection, server identity should be checked.\n\n#### Learn More\n\n - [CWE-297: Improper Validation of Certificate with Host Mismatch](https://cwe.mitre.org/data/definitions/297.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/smtp-insecure-connection","id":"java-security/smtp-insecure-connection","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:297"]},"shortDescription":{"text":"SMTP server identify must be enforced"}},{"fullDescription":{"text":"Cookie should not persist for too long. If the computer that stores the cookie is attacked or breached, this can lead to a potential account compromise.\n\nCookies should not be stored too long and should not be used to store sensitive data (such as personal identifiable information).\n\n#### Learn More\n\n - [Cookie JavaDoc](https://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/http/Cookie.html#setMaxAge%28int%29)\n - [CWE-539: Use of Persistent Cookies Containing Sensitive Information](https://cwe.mitre.org/data/definitions/539.html) "},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/cookies-persistence","id":"java-security/cookies-persistence","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:539"]},"shortDescription":{"text":"Cookies should not have a long expiration"}},{"fullDescription":{"text":"JNDI API support the binding of serialize object in LDAP directories and can lead to remove code execution. Generally, object deserialization should be consider a risky operation that can lead to remote code execution. This exploitation has been demonstrated at Black Hat USA 2016.\n\n#### Learn More\n\n - [Black Hat 2016 Exploitation](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/ldap-entry-poisoning","id":"java-security/ldap-entry-poisoning","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:"]},"shortDescription":{"text":"Prevent LDAP Entry Poisoning"}},{"fullDescription":{"text":"Do not set overly permissive CORS requests. Restrict the host allowed to communicate with to prevent potential malicious requests in your application.\n\n#### Learn More\n\n - [Fetch Living Standard](https://fetch.spec.whatwg.org/)\n - [Enable Cross-Origin Resource Sharing](https://enable-cors.org/)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/permissive-cors","id":"java-security/permissive-cors","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS"]},"shortDescription":{"text":"Avoid overly permissive CORS"}},{"fullDescription":{"text":"A cookie must always be created with `HttpOnly`. The flag is set to prevent malicious script to use the cookie. Always set `HttpOnly`.\n\n#### Learn More\n\n - [OWASP HTTP Only](https://owasp.org/www-community/HttpOnly)\n - [Coding Horror - Protecting Your Cookies: HttpOnly](https://blog.codinghorror.com/protecting-your-cookies-httponly/)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/cookies-http-only","id":"java-security/cookies-http-only","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:614"]},"shortDescription":{"text":"Cookies HTTP only"}},{"fullDescription":{"text":"Ensure cookies use the `secure` flag or attribute. If not set, it could cause the user agent to send those cookies in plaintext over an HTTP session.\n\n#### Learn More\n\n - [CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute](https://cwe.mitre.org/data/definitions/614.html)\n"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/cookies-secure-flag","id":"java-security/cookies-secure-flag","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:614"]},"shortDescription":{"text":"Ensure cookies have the secure flag"}},{"fullDescription":{"text":"Deserialization of untrusted data can lead to system compromise. Make sure you only deserialize data you trust.\n\n#### Learn More\n\n - [CWE-502](https://cwe.mitre.org/data/definitions/502.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/object-deserialization","id":"java-security/object-deserialization","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:502"]},"shortDescription":{"text":"Prevent deserialization"}},{"fullDescription":{"text":"Functions as `Math.random()` and objects like `java.util.Random()` do not provide strong enough randomness. Consider using `java.security.SecureRandom()` instead."},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/avoid-random","id":"java-security/avoid-random","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:330"]},"shortDescription":{"text":"Prefer SecureRandom over Random"}},{"fullDescription":{"text":"Disabling CSRF leads to security issues as the server may not be able to accurately identify a request.\n\n#### Learn More\n\n - [CWE-352](https://cwe.mitre.org/data/definitions/352.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/spring-csrf-disable","id":"java-security/spring-csrf-disable","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:352"]},"shortDescription":{"text":"Do not disable CSRF"}},{"fullDescription":{"text":"An attacker could try to pass a filename of content that could traverse the server path and control system files. Make sure all user-inputs is checked and sanitized before use.\n\n#### Learn More\n\n - [CWE-23 - Relative Path Traversal](https://cwe.mitre.org/data/definitions/23.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/spring-request-file-tainted","id":"java-security/spring-request-file-tainted","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:23"]},"shortDescription":{"text":"Avoid user-input file"}},{"fullDescription":{"text":"The DES protocol is deprecated. Consider using a stronger protocol such as AES.\n\n#### Learn More\n\n - [CWE-326: Inadequate Encryption Strength](https://cwe.mitre.org/data/definitions/326.html)"},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/keygenerator-avoid-des","id":"java-security/keygenerator-avoid-des","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:326"]},"shortDescription":{"text":"Avoid DES keys"}},{"fullDescription":{"text":"Using reflection with class names being manually generated is unsafe and can lead to code injection. The class name must be validated and the program should make sure no malicious class can be loaded at runtime."},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/unsafe-reflection","id":"java-security/unsafe-reflection","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:470"]},"shortDescription":{"text":"Avoid user-generated class names for reflection"}},{"fullDescription":{"text":"This rule helps to prevent security vulnerabilities that may arise when user-supplied data is used in the construction of an LDAP (Lightweight Directory Access Protocol) query without proper sanitization or validation. LDAP Injection is an attack technique used to exploit applications that construct LDAP statements without proper input or output sanitizing. This can lead to the execution of arbitrary LDAP queries, potentially revealing sensitive information stored in the LDAP structure.\n\nIn the provided non-compliant code, the issue arises from the use of the user-provided `param` in the LDAP filter without sanitizing or validating it (`String filter = \"(&(objectclass=person))(|(uid=\" + param + \")(street={0}))\";`). This could allow an attacker to inject malicious LDAP queries.\n\nTo avoid LDAP injections, user inputs should never be directly used in the formation of an LDAP query. Instead, they should be properly sanitized or validated before use. This can be achieved using prepared statements, parameterized queries, or input validation techniques. \n\nFor instance, the non-compliant code can be modified to use parameterized filters. Instead of concatenating the user input directly into the filter string, placeholders can be used (such as `(uid={0})`). The user input can then be supplied as a separate parameter which will be automatically escaped by the LDAP library, mitigating the risk of LDAP injection. You can also apply a whitelist validation on the user inputs to further ensure the security of the application."},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/ldap-injection","id":"java-security/ldap-injection","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:90"]},"shortDescription":{"text":"Avoid LDAP injections"}},{"fullDescription":{"text":"This rule identifies potential security vulnerabilities in your code where an XPath expression may be influenced by data coming from an HTTP request. This could lead to what is known as an XPath Injection attack, where an attacker could manipulate the XPath query to access unauthorized data, or potentially cause other harmful effects.\n\nThis rule is crucial because XPath Injection is a severe security risk, similar to SQL Injection. If an attacker can control part of an XPath query, they can alter the query's logic, leading to unauthorized access or exposure to sensitive data.\n\nNever construct XPath queries using string concatenation with unvalidated input. Instead, always use parameterized queries or sanitize the input before using it in an XPath query. If possible, limit the XPath functionality that your application uses to reduce the attack surface. You can also use APIs that automatically protect against XPath Injection, or use a web application firewall to detect and block attack attempts."},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/tainted-xpath","id":"java-security/tainted-xpath","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:643"]},"shortDescription":{"text":"Detect an XPath input from an HTTP request"}},{"fullDescription":{"text":"The \"Enforce trust boundaries\" rule is a critical security principle that ensures all data crossing the trust boundary of an application is properly validated. Trust boundaries can be defined as the points in a program where data is transferred from a trusted to an untrusted source or vice versa. \n\nThis rule helps prevent various security vulnerabilities such as SQL injection, cross-site scripting (XSS), and remote code execution which could occur if untrusted data is not correctly validated or sanitized.\n\nGood coding practices to avoid violating this rule include validating all incoming data, encoding data that will be output, and using parameterized queries or prepared statements for database interactions. For instance, in the provided compliant code sample, the cookie value is URL decoded and then HTML encoded before it is output to the user, ensuring that any potentially malicious script tags are not executed. Additionally, the use of HttpOnly cookies can prevent client-side script from accessing sensitive data."},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/trust-boundaries","id":"java-security/trust-boundaries","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:501"]},"shortDescription":{"text":"Enforce trust boundaries"}},{"fullDescription":{"text":"This rule prevents security vulnerabilities that allow an attacker to read, write, or delete files on the server that they should not have access to. This type of attack, known as Path Traversal or Directory Traversal, involves manipulating variables that reference files with `../` sequences and its variations.\n\nThe potential harm of this vulnerability is significant, as it can lead to unauthorized access to sensitive data, corruption of system files, or even complete takeover of the server. It is, therefore, crucial to implement safeguards against path traversal attacks in your code.\n\nIn Java, you can avoid path traversal vulnerabilities by not using user input directly to access file paths. If you must use user input, ensure that it is properly sanitized. For example, you could use a whitelist of acceptable inputs, or strip out or deny any input containing '..' or similar sequences. In the provided code, the user input (param) is used to construct a file path (fileName), but it is first checked to ensure that it does not contain any path traversal sequences. This makes the code compliant with the 'Prevent path traversal' rule."},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/path-traversal","id":"java-security/path-traversal","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:22"]},"shortDescription":{"text":"Prevent path traversal"}},{"fullDescription":{"text":"This rule detects potential SQL injections. SQL Injection is a common application layer attack technique used by hackers to steal or manipulate data from the database. It occurs when an application includes untrusted data in a SQL command that is part of a query.\n\nSQL injection can lead to serious data breaches, unauthorized access, data corruption, and in some cases, even complete system takeover. It is crucial to ensure your code is immune to such vulnerabilities.\n\nAdhering to good coding practices can help avoid SQL injection. Always use parameterized queries or prepared statements instead of concatenating user input into SQL commands. For instance, use `PreparedStatement` with placeholders (`?`) in Java to ensure user input is appropriately sanitized before it is included in a SQL command. Avoid exposing detailed error messages that might reveal underlying database structure. Regularly update and patch your systems, and consider using a web application firewall for an additional layer of security."},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/sql-injection","id":"java-security/sql-injection","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:89"]},"shortDescription":{"text":"Avoid SQL injection"}},{"fullDescription":{"text":"This rule detects command injection, a serious security vulnerability that occurs when an attacker is able to manipulate a command that the application executes. Command injection attacks can lead to data loss, corruption, or unauthorized access to sensitive system data.\n\nCommand injection vulnerabilities generally occur when user input is used unsanitized in a command that is executed by the application. In the non-compliant code samples, the user input is directly added to a command that is executed by the application, allowing an attacker to potentially execute arbitrary commands.\n\nTo avoid this vulnerability, user input should never be used directly in a command that is executed by the application. Instead, use safe APIs that allow you to execute commands without the risk of injection, or ensure that user input is properly sanitized before it is used. If you must use user input in a command, ensure that it is properly escaped or quoted to prevent the injection of additional commands."},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/command-injection","id":"java-security/command-injection","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:78"]},"shortDescription":{"text":"Prevent command injection"}},{"fullDescription":{"text":"This rule is designed to prevent Cross-Site Scripting (XSS) attacks, which occur when untrusted data is included in a web page without proper validation or escaping, allowing an attacker to inject malicious scripts and perform actions on behalf of the user. It's important because XSS attacks can lead to a variety of security breaches, including session hijacking, identity theft, and defacement of websites.\n\nIn Java, particularly in web applications, developers should always validate and sanitize user input before using it in HTML or JavaScript code. This involves ensuring that the input conforms to expected formats and does not contain potentially harmful characters or scripts. \n\nTo avoid violations of this rule, use context-specific output encoding whenever outputting user-controlled data. Libraries such as the OWASP Java Encoder can be used to safely encode user data for different HTML and JavaScript contexts. Also, consider using modern web development frameworks that automatically escape user-controlled data, such as Thymeleaf for Java.\n\nIn addition, setting the HTTP response header `X-XSS-Protection` to `0` can disable the browser's built-in XSS protection, leaving the user more vulnerable to XSS attacks. Do not set this header to `0` unless you have a specific reason to do so and understand the security implications."},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/xss-protection","id":"java-security/xss-protection","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:79"]},"shortDescription":{"text":"Prevent XSS attacks"}},{"fullDescription":{"text":""},"helpUri":"https://docs.datadoghq.com/static_analysis/rules/java-security/tainted-url-host","id":"java-security/tainted-url-host","properties":{"tags":["DATADOG_RULE_TYPE:STATIC_ANALYSIS","CWE:918"]},"shortDescription":{"text":"Prevent SSRF"}}],"version":"0.6.1"}}}],"version":"2.1.0"}