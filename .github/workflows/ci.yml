# This workflow will do a clean install of node dependencies, build the source code and run tests

name: Continuous Integration

on: push

jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest
    services:
      agent:
        image: datadog/agent
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY_MAIN_ACCOUNT }}
          DD_ENV: ci
          DD_APM_ENABLED: true
          DD_APM_NON_LOCAL_TRAFFIC: true
          DD_APM_MAX_TPS: 0
          DD_APM_MAX_EPS: 0
          DD_INSIDE_CI: true
        ports:
          - 8126:8126

    steps:
      - uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: '10.24.1'
      - run: yarn install --immutable
      - run: yarn build
      - run: yarn lint
      - run: yarn test
        env:
          CI: true
          DD_SERVICE: datadog-ci-tests
      - run: mkdir artifacts
      - run: yarn pack --filename artifacts/datadog-ci.tgz
      - run: cp -r .github/workflows/e2e artifacts/
      - uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts/

  e2e-test:
    name: End-to-end test the package
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - uses: actions/download-artifact@v1
        with:
          name: artifacts
      - run: yarn add ./artifacts/datadog-ci.tgz
      - name: Run synthetics test
        run: yarn datadog-ci synthetics run-tests --config artifacts/e2e/global.config.json
        env:
          DATADOG_API_KEY: ${{ secrets.datadog_api_key }}
          DATADOG_APP_KEY: ${{ secrets.datadog_app_key }}
      - name: Run sourcemaps upload test
        run: yarn datadog-ci sourcemaps upload artifacts/e2e/sourcemaps/ --release-version=e2e --service=e2e-tests --minified-path-prefix=https://e2e-tests.datadoghq.com/static/
        env:
          DATADOG_API_KEY: ${{ secrets.datadog_api_key }}
          DATADOG_APP_KEY: ${{ secrets.datadog_app_key }}

  standalone-binary-test-ubuntu:
    name: Test standalone binary in ubuntu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: '14.18.3'
      - run: yarn install --immutable
      - run: yarn build
      - name: Create standalone binary
        run: yarn dist-standalone -t node14-linux-x64 -o datadog-ci_linux-x64
      - name: Remove dist and src folder to check that binary can stand alone
        run: |
          rm -rf dist
          rm -rf src
      - name: Test generated standalone binary
        run: yarn dist-standalone:test

  standalone-binary-test-windows:
    name: Test standalone binary in windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: '14.18.3'
      - run: yarn install --immutable
      - run: yarn build:win
      - name: Create standalone binary
        run: yarn dist-standalone -t node14-win-x64 -o datadog-ci_win-x64
      - name: Remove dist and src folder to check that binary can stand alone
        run: |
          rm dist -r
          rm src -r
      - name: Test generated standalone binary
        run: yarn dist-standalone:test

  standalone-binary-test-macos:
    name: Test standalone binary in macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: '14.18.3'
      - run: yarn install --immutable
      - run: yarn build
      - name: Create standalone binary
        run: yarn dist-standalone -t node14-macos-x64 -o datadog-ci_darwin-x64
      - name: Remove dist and src folder to check that binary can stand alone
        run: |
          rm -rf dist
          rm -rf src
      - name: Test generated standalone binary
        run: yarn dist-standalone:test

  standalone-binary-ubuntu-arm64:
    name: Test standalone binary in ubuntu arm64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: '14.18.3'
      - uses: uraimo/run-on-arch-action@v2
        name: Build and run on arm64
        with:
          arch: aarch64
          distro: ubuntu20.04
          env: |
            IS_ARM64: "true"
          dockerRunArgs: |
            --volume "${PWD}:/app"
          install: |
            apt-get install -y curl
            curl -fsSL https://deb.nodesource.com/setup_14.x | bash -
            apt-get install -y nodejs
          run: |
            yarn install --immutable
            yarn build
            yarn dist-standalone -t node14-linux-arm64 -o datadog-ci_linux-arm64
            rm -rf dist
            rm -rf src
            yarn dist-standalone:test

  check-licenses:
    name: Check licenses
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - run: yarn check-licenses
