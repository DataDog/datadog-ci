<?xml version="1.0" encoding="UTF-8"?>
<!-- Javascript / Jest -->
<testsuites name="jest tests" tests="178" failures="1" time="14.199">
  <testsuite name="TabContainer" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:45" time="4.642" tests="2">
    <testcase classname="TabContainer changes tab after lazily loading content" name="TabContainer changes tab after lazily loading content" time="0.065">
    </testcase>
    <testcase classname="TabContainer changes the content of the tab if it is active" name="TabContainer changes the content of the tab if it is active" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="ServiceLayout" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:45" time="4.574" tests="1">
    <testcase classname="ServiceLayout renders correctly" name="ServiceLayout renders correctly" time="0.057">
    </testcase>
  </testsuite>
  <testsuite name="TestExecutionEvents" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:45" time="4.633" tests="1">
    <testcase classname="TestExecutionEvents renders correctly" name="TestExecutionEvents renders correctly" time="0.097">
    </testcase>
  </testsuite>
  <testsuite name="TestExecutionTrace" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:45" time="4.682" tests="2">
    <testcase classname="TestExecutionTrace renders correctly" name="TestExecutionTrace renders correctly" time="0.097">
    </testcase>
    <testcase classname="replaceNamesForExternalServices should return span with color, language, platform and technology" name="replaceNamesForExternalServices should return span with color, language, platform and technology" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Notifications" errors="0" failures="1" skipped="1" timestamp="2020-02-11T09:26:45" time="5.207" tests="13">
    <testcase classname="Notifications when new app version available is skipped" name="Notifications when new app version available is skipped" time="0.001">
      <skipped/>
    </testcase>
    <testcase classname="Notifications when new app version available renders badge" name="Notifications when new app version available renders badge" time="0.058">
      <failure>Error: expect(received).toEqual(expected) // deep equality

Expected: false
Received: true
    at Object.&lt;anonymous&gt; (/Users/juanfernandez/Desktop/dev/ui/src/components/Header/components/Notifications/test/Notifications.test.js:47:20)
    at Object.asyncJestTest (/Users/juanfernandez/Desktop/dev/ui/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)
    at /Users/juanfernandez/Desktop/dev/ui/node_modules/jest-jasmine2/build/queueRunner.js:43:12
    at new Promise (&lt;anonymous&gt;)
    at mapper (/Users/juanfernandez/Desktop/dev/ui/node_modules/jest-jasmine2/build/queueRunner.js:26:19)
    at /Users/juanfernandez/Desktop/dev/ui/node_modules/jest-jasmine2/build/queueRunner.js:73:41
    at processTicksAndRejections (internal/process/task_queues.js:93:5)</failure>
    </testcase>
    <testcase classname="Notifications when new app version available keeps rendering badge after read" name="Notifications when new app version available keeps rendering badge after read" time="0.031">
    </testcase>
    <testcase classname="Notifications when new app version available renders text with latest app version" name="Notifications when new app version available renders text with latest app version" time="0.011">
    </testcase>
    <testcase classname="Notifications when new app version available renders text asking to refresh browser" name="Notifications when new app version available renders text asking to refresh browser" time="0.013">
    </testcase>
    <testcase classname="Notifications when notification for latest app version not read renders badge" name="Notifications when notification for latest app version not read renders badge" time="0.016">
    </testcase>
    <testcase classname="Notifications when notification for latest app version not read does not render badge after read" name="Notifications when notification for latest app version not read does not render badge after read" time="0.01">
    </testcase>
    <testcase classname="Notifications when notification for latest app version not read renders text with latest app version" name="Notifications when notification for latest app version not read renders text with latest app version" time="0.009">
    </testcase>
    <testcase classname="Notifications when notification for latest app version not read does not render text asking to refresh browser" name="Notifications when notification for latest app version not read does not render text asking to refresh browser" time="0.009">
    </testcase>
    <testcase classname="Notifications when no new app version available and notification for latest app version read does not render badge" name="Notifications when no new app version available and notification for latest app version read does not render badge" time="0.006">
    </testcase>
    <testcase classname="Notifications when no new app version available and notification for latest app version read keeps not rendering badge after read" name="Notifications when no new app version available and notification for latest app version read keeps not rendering badge after read" time="0.011">
    </testcase>
    <testcase classname="Notifications when no new app version available and notification for latest app version read renders text with latest app version" name="Notifications when no new app version available and notification for latest app version read renders text with latest app version" time="0.01">
    </testcase>
    <testcase classname="Notifications when no new app version available and notification for latest app version read does not render text asking to refresh browser" name="Notifications when no new app version available and notification for latest app version read does not render text asking to refresh browser" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="AdminLoginBox" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:50" time="1.027" tests="1">
    <testcase classname="AdminLoginBox renders correctly" name="AdminLoginBox renders correctly" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="AdminPasswordChangeUpdateForm" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:50" time="1.045" tests="1">
    <testcase classname="AdminPasswordChangeUpdateForm renders correctly" name="AdminPasswordChangeUpdateForm renders correctly" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="CodeInstructions" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:50" time="1.301" tests="1">
    <testcase classname="CodeInstructions renders correctly" name="CodeInstructions renders correctly" time="0.073">
    </testcase>
  </testsuite>
  <testsuite name="AdminSettings" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:50" time="1.871" tests="1">
    <testcase classname="AdminSettings renders correctly" name="AdminSettings renders correctly" time="0.091">
    </testcase>
  </testsuite>
  <testsuite name="Dashboard" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:45" time="6.598" tests="2">
    <testcase classname="Dashboard renders correctly getting started" name="Dashboard renders correctly getting started" time="1.051">
    </testcase>
    <testcase classname="Dashboard renders correctly services" name="Dashboard renders correctly services" time="1.011">
    </testcase>
  </testsuite>
  <testsuite name="TestExecutionDetail" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:50" time="1.979" tests="1">
    <testcase classname="TestExecutionDetail renders correctly" name="TestExecutionDetail renders correctly" time="0.457">
    </testcase>
  </testsuite>
  <testsuite name="AdminScopeHostUpdateForm" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:51" time="1.106" tests="1">
    <testcase classname="AdminScopeHostUpdateForm renders correctly" name="AdminScopeHostUpdateForm renders correctly" time="0.049">
    </testcase>
  </testsuite>
  <testsuite name="ServiceDashboard" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:51" time="1.674" tests="1">
    <testcase classname="ServiceDashboard renders correctly" name="ServiceDashboard renders correctly" time="0.34">
    </testcase>
  </testsuite>
  <testsuite name="UserLoginBox" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:52" time="1.065" tests="2">
    <testcase classname="UserLoginBox renders correctly" name="UserLoginBox renders correctly" time="0.013">
    </testcase>
    <testcase classname="UserLoginBox renders alert message from url params" name="UserLoginBox renders alert message from url params" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="TraceEvents" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:52" time="1.086" tests="1">
    <testcase classname="TraceEvents renders correctly" name="TraceEvents renders correctly" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="EventDetails" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:52" time="1.246" tests="1">
    <testcase classname="EventDetails renders correctly" name="EventDetails renders correctly" time="0.047">
    </testcase>
  </testsuite>
  <testsuite name="DashboardLayout" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:52" time="1.493" tests="3">
    <testcase classname="DashboardLayout renders correctly" name="DashboardLayout renders correctly" time="0.076">
    </testcase>
    <testcase classname="moveViewerPersonalNamespaceToTop should return personal namespace at first position if viewer exist" name="moveViewerPersonalNamespaceToTop should return personal namespace at first position if viewer exist" time="0.002">
    </testcase>
    <testcase classname="moveViewerPersonalNamespaceToTop should return personal namespace at first position if personal namespace exist" name="moveViewerPersonalNamespaceToTop should return personal namespace at first position if personal namespace exist" time="0">
    </testcase>
  </testsuite>
  <testsuite name="InspectComponent" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:52" time="1.786" tests="1">
    <testcase classname="InspectComponent renders correctly" name="InspectComponent renders correctly" time="0.148">
    </testcase>
  </testsuite>
  <testsuite name="ServiceCard" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:53" time="1.419" tests="4">
    <testcase classname="ServiceCard renders correctly" name="ServiceCard renders correctly" time="0.076">
    </testcase>
    <testcase classname="getCompleteServiceName returns &quot;service | repository&quot; if service name is not empty" name="getCompleteServiceName returns &quot;service | repository&quot; if service name is not empty" time="0.001">
    </testcase>
    <testcase classname="getCompleteServiceName returns repository only if service name is empty" name="getCompleteServiceName returns repository only if service name is empty" time="0">
    </testcase>
    <testcase classname="getCompleteServiceName returns repository only if service name is default" name="getCompleteServiceName returns repository only if service name is default" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:53" time="1.009" tests="1">
    <testcase classname=" renders without crashing" name=" renders without crashing" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="LoginLayout" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:53" time="1.43" tests="1">
    <testcase classname="LoginLayout renders correctly" name="LoginLayout renders correctly" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="AdminSidebar" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:53" time="1.187" tests="1">
    <testcase classname="AdminSidebar renders correctly" name="AdminSidebar renders correctly" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Header" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:53" time="1.268" tests="1">
    <testcase classname="Header renders correctly" name="Header renders correctly" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="SpanEvents" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:53" time="1.232" tests="1">
    <testcase classname="SpanEvents renders correctly" name="SpanEvents renders correctly" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="NotFound" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:54" time="1.076" tests="1">
    <testcase classname="NotFound renders correctly" name="NotFound renders correctly" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="CodeBlock" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:54" time="1.219" tests="1">
    <testcase classname="CodeBlock renders correctly" name="CodeBlock renders correctly" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="SpanDetails" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:54" time="1.294" tests="1">
    <testcase classname="SpanDetails renders correctly" name="SpanDetails renders correctly" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="DashboardOnboarding" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:54" time="1.253" tests="1">
    <testcase classname="DashboardOnboarding renders correctly" name="DashboardOnboarding renders correctly" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="CodeSegmentViewer" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:54" time="1.254" tests="1">
    <testcase classname="CodeSegmentViewer renders correctly" name="CodeSegmentViewer renders correctly" time="0.055">
    </testcase>
  </testsuite>
  <testsuite name="AdminScopeHostForm" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:55" time="1.348" tests="1">
    <testcase classname="AdminScopeHostForm renders correctly" name="AdminScopeHostForm renders correctly" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="AdminLoginForm" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:55" time="1.135" tests="1">
    <testcase classname="AdminLoginForm renders correctly" name="AdminLoginForm renders correctly" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="AdminAbout" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:55" time="1.337" tests="1">
    <testcase classname="AdminAbout renders correctly" name="AdminAbout renders correctly" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="TestStatusVerticalIndicator" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:55" time="1.301" tests="1">
    <testcase classname="TestStatusVerticalIndicator renders correctly" name="TestStatusVerticalIndicator renders correctly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="LogoSidebar" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:55" time="1.071" tests="1">
    <testcase classname="LogoSidebar renders correctly" name="LogoSidebar renders correctly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="AdminSetupWizard" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:56" time="1.283" tests="1">
    <testcase classname="AdminSetupWizard renders correctly" name="AdminSetupWizard renders correctly" time="0.066">
    </testcase>
  </testsuite>
  <testsuite name="getLineExecutionsFragments" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:56" time="1.18" tests="10">
    <testcase classname="getLineExecutionsFragments should return the entire line with no executions if boundaries is empty" name="getLineExecutionsFragments should return the entire line with no executions if boundaries is empty" time="0.002">
    </testcase>
    <testcase classname="getLineExecutionsFragments should return the entire line with executions" name="getLineExecutionsFragments should return the entire line with executions" time="0">
    </testcase>
    <testcase classname="getLineExecutionsFragments should return two fragments, first with executions" name="getLineExecutionsFragments should return two fragments, first with executions" time="0.001">
    </testcase>
    <testcase classname="getLineExecutionsFragments should return two fragments, first with no executions" name="getLineExecutionsFragments should return two fragments, first with no executions" time="0">
    </testcase>
    <testcase classname="getLineExecutionsFragments should return three fragments" name="getLineExecutionsFragments should return three fragments" time="0.001">
    </testcase>
    <testcase classname="getLineExecutionsFragments should return four fragments" name="getLineExecutionsFragments should return four fragments" time="0">
    </testcase>
    <testcase classname="getLineExecutionsFragments should works with no column definition" name="getLineExecutionsFragments should works with no column definition" time="0.001">
    </testcase>
    <testcase classname="getLineExecutionsFragments should set same boundaryId on multiple fragments" name="getLineExecutionsFragments should set same boundaryId on multiple fragments" time="0">
    </testcase>
    <testcase classname="getLineExecutionsFragments should return last character of a line outside a boundary" name="getLineExecutionsFragments should return last character of a line outside a boundary" time="0.001">
    </testcase>
    <testcase classname="getLineExecutionsFragments should not break for boundaries that represent lines outside the original source code" name="getLineExecutionsFragments should not break for boundaries that represent lines outside the original source code" time="0">
    </testcase>
  </testsuite>
  <testsuite name="AdminGitHubAppForm" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:57" time="1.068" tests="1">
    <testcase classname="AdminGitHubAppForm renders correctly" name="AdminGitHubAppForm renders correctly" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="DemoLoginForm" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:57" time="1.049" tests="1">
    <testcase classname="DemoLoginForm should render without crashing" name="DemoLoginForm should render without crashing" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="Utils" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:57" time="0.376" tests="43">
    <testcase classname="Utils removeNamespace it removes the namespace successfully" name="Utils removeNamespace it removes the namespace successfully" time="0.001">
    </testcase>
    <testcase classname="Utils removeNamespace it does not remove the namespace if it does not find it" name="Utils removeNamespace it does not remove the namespace if it does not find it" time="0">
    </testcase>
    <testcase classname="Utils removeNamespace it does not crash with bad input and returns repoName untouched" name="Utils removeNamespace it does not crash with bad input and returns repoName untouched" time="0">
    </testcase>
    <testcase classname="Utils removeNamespace it only acts on the beginning of the repo name" name="Utils removeNamespace it only acts on the beginning of the repo name" time="0.001">
    </testcase>
    <testcase classname="Utils getSourceRootFromAgent it gets the source root from the agent" name="Utils getSourceRootFromAgent it gets the source root from the agent" time="0.001">
    </testcase>
    <testcase classname="Utils getSourceRootFromAgent it returns an empty string if there is no source root" name="Utils getSourceRootFromAgent it returns an empty string if there is no source root" time="0">
    </testcase>
    <testcase classname="Utils getSourceRootFromAgent it returns an empty string if input is invalid" name="Utils getSourceRootFromAgent it returns an empty string if input is invalid" time="0.011">
    </testcase>
    <testcase classname="Utils getRepoBaseURLFromAgent it gets the repo base url from the agent" name="Utils getRepoBaseURLFromAgent it gets the repo base url from the agent" time="0.003">
    </testcase>
    <testcase classname="Utils getRepoBaseURLFromAgent it returns an empty string if invalid data is input" name="Utils getRepoBaseURLFromAgent it returns an empty string if invalid data is input" time="0.001">
    </testcase>
    <testcase classname="Utils base64ToLines it transforms base 64 file contents to code lines" name="Utils base64ToLines it transforms base 64 file contents to code lines" time="0.002">
    </testcase>
    <testcase classname="Utils base64ToLines it does not crash with badly formatted input" name="Utils base64ToLines it does not crash with badly formatted input" time="0.001">
    </testcase>
    <testcase classname="Utils base64ToLines it does not crash with lines out of bound" name="Utils base64ToLines it does not crash with lines out of bound" time="0.001">
    </testcase>
    <testcase classname="Utils base64ToLines it does not crash with invalid lines" name="Utils base64ToLines it does not crash with invalid lines" time="0.002">
    </testcase>
    <testcase classname="Utils base64ToLines it sets the end line to the end of the file if the input is bigger" name="Utils base64ToLines it sets the end line to the end of the file if the input is bigger" time="0.01">
    </testcase>
    <testcase classname="Utils base64ToLines it sets the start line to 1 if it is smaller than 1" name="Utils base64ToLines it sets the start line to 1 if it is smaller than 1" time="0.001">
    </testcase>
    <testcase classname="Utils getBranchStatus it returns the status correctly" name="Utils getBranchStatus it returns the status correctly" time="0">
    </testcase>
    <testcase classname="Utils getBranchStatus it returns unknown if the service is not found" name="Utils getBranchStatus it returns unknown if the service is not found" time="0">
    </testcase>
    <testcase classname="Utils getBranchStatus it returns unknown if statusByService is empty" name="Utils getBranchStatus it returns unknown if statusByService is empty" time="0.001">
    </testcase>
    <testcase classname="Utils getBranchStatus it returns unknown if statusByService is null or undefined" name="Utils getBranchStatus it returns unknown if statusByService is null or undefined" time="0">
    </testcase>
    <testcase classname="Utils getBranchStatus it returns unknown if input data is invalid" name="Utils getBranchStatus it returns unknown if input data is invalid" time="0">
    </testcase>
    <testcase classname="Utils getSpanTiming it returns correct timing information" name="Utils getSpanTiming it returns correct timing information" time="0.001">
    </testcase>
    <testcase classname="Utils getSpanTiming it returns null if the span id is not found" name="Utils getSpanTiming it returns null if the span id is not found" time="0.001">
    </testcase>
    <testcase classname="Utils getSpanTiming it returns null with invalid data" name="Utils getSpanTiming it returns null with invalid data" time="0.005">
    </testcase>
    <testcase classname="Utils getStackTraceInformation gets the stack trace information from the first frame if there are no symbolicated frames" name="Utils getStackTraceInformation gets the stack trace information from the first frame if there are no symbolicated frames" time="0.001">
    </testcase>
    <testcase classname="Utils getStackTraceInformation gets the first symbolicated frame with a relative path" name="Utils getStackTraceInformation gets the first symbolicated frame with a relative path" time="0.001">
    </testcase>
    <testcase classname="Utils getStackTraceInformation returns the first symbolicated frame if there are no frames with relative path" name="Utils getStackTraceInformation returns the first symbolicated frame if there are no frames with relative path" time="0">
    </testcase>
    <testcase classname="Utils getStackTraceInformation returns the line number correctly" name="Utils getStackTraceInformation returns the line number correctly" time="0.001">
    </testcase>
    <testcase classname="Utils getStackTraceInformation does not break with empty data" name="Utils getStackTraceInformation does not break with empty data" time="0">
    </testcase>
    <testcase classname="Utils getStackTraceInformation does not break with invalid data" name="Utils getStackTraceInformation does not break with invalid data" time="0.001">
    </testcase>
    <testcase classname="Utils getNanosecondsFromString returns nanoseconds from a human readable string" name="Utils getNanosecondsFromString returns nanoseconds from a human readable string" time="0.001">
    </testcase>
    <testcase classname="Utils getNanosecondsFromString returns null for invalid data" name="Utils getNanosecondsFromString returns null for invalid data" time="0.001">
    </testcase>
    <testcase classname="Utils flattenNode flattens deeply nested connection fields" name="Utils flattenNode flattens deeply nested connection fields" time="0.001">
    </testcase>
    <testcase classname="Utils flattenNode makes a deep clone of the input" name="Utils flattenNode makes a deep clone of the input" time="0">
    </testcase>
    <testcase classname="Utils flattenNode works with real data" name="Utils flattenNode works with real data" time="0.001">
    </testcase>
    <testcase classname="Utils flattenNode does not break with invalid or empty data" name="Utils flattenNode does not break with invalid or empty data" time="0.001">
    </testcase>
    <testcase classname="areAgentsWithSameServiceName should return true for one item" name="areAgentsWithSameServiceName should return true for one item" time="0">
    </testcase>
    <testcase classname="areAgentsWithSameServiceName should return true for two or more items with agents with same service name" name="areAgentsWithSameServiceName should return true for two or more items with agents with same service name" time="0.001">
    </testcase>
    <testcase classname="areAgentsWithSameServiceName should return false for two or more items with agents with different service names" name="areAgentsWithSameServiceName should return false for two or more items with agents with different service names" time="0.001">
    </testcase>
    <testcase classname="getEventLevel should return NOTSET for unknown event fields" name="getEventLevel should return NOTSET for unknown event fields" time="0">
    </testcase>
    <testcase classname="getEventLevel should return log level field" name="getEventLevel should return log level field" time="0">
    </testcase>
    <testcase classname="getEventLevel should return event field" name="getEventLevel should return event field" time="0">
    </testcase>
    <testcase classname="getEventLevel should return FAIL for event test_failure event value" name="getEventLevel should return FAIL for event test_failure event value" time="0">
    </testcase>
    <testcase classname="getEventLevel should NOTSET as default value" name="getEventLevel should NOTSET as default value" time="0">
    </testcase>
  </testsuite>
  <testsuite name="ErrorAlert" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:56" time="1.161" tests="1">
    <testcase classname="ErrorAlert renders correctly" name="ErrorAlert renders correctly" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="Form" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:57" time="1.121" tests="1">
    <testcase classname="Form should renders without crashing" name="Form should renders without crashing" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="AdminPasswordForm" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:58" time="0.233" tests="1">
    <testcase classname="AdminPasswordForm renders correctly" name="AdminPasswordForm renders correctly" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="isClientSpanToNoInstrumentedService" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:58" time="0.246" tests="13">
    <testcase classname="isClientSpanToNoInstrumentedService should return true for client span kind" name="isClientSpanToNoInstrumentedService should return true for client span kind" time="0.001">
    </testcase>
    <testcase classname="isClientSpanToNoInstrumentedService should return true for producer span kind" name="isClientSpanToNoInstrumentedService should return true for producer span kind" time="0">
    </testcase>
    <testcase classname="isClientSpanToNoInstrumentedService should return false for client span kind with children" name="isClientSpanToNoInstrumentedService should return false for client span kind with children" time="0.004">
    </testcase>
    <testcase classname="getSpanServiceIdentifier should return agent id as identifier for spans with children" name="getSpanServiceIdentifier should return agent id as identifier for spans with children" time="0">
    </testcase>
    <testcase classname="getSpanServiceIdentifier should return hostname for leaf span with http request" name="getSpanServiceIdentifier should return hostname for leaf span with http request" time="0">
    </testcase>
    <testcase classname="getSpanServiceIdentifier should return domain for leaf span with http request" name="getSpanServiceIdentifier should return domain for leaf span with http request" time="0.001">
    </testcase>
    <testcase classname="getSpanServiceLabel should return service and repo name" name="getSpanServiceLabel should return service and repo name" time="0.001">
    </testcase>
    <testcase classname="getSpanServiceLabel should return external service for unknown repository" name="getSpanServiceLabel should return external service for unknown repository" time="0">
    </testcase>
    <testcase classname="getSpanServiceLabel should return local development for unknown repository of same agent" name="getSpanServiceLabel should return local development for unknown repository of same agent" time="0.001">
    </testcase>
    <testcase classname="getSpanServiceLabel should return service + local development for unknown repository of same agent with same services" name="getSpanServiceLabel should return service + local development for unknown repository of same agent with same services" time="0">
    </testcase>
    <testcase classname="getSpanServiceLabel should return hostname for leaf span with http request" name="getSpanServiceLabel should return hostname for leaf span with http request" time="0">
    </testcase>
    <testcase classname="getSpanServiceLabel should return domain for leaf span with http request" name="getSpanServiceLabel should return domain for leaf span with http request" time="0.001">
    </testcase>
    <testcase classname="serviceName calculates" name="serviceName calculates" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Builds" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:58" time="0.207" tests="1">
    <testcase classname="Builds should return correct tags" name="Builds should return correct tags" time="0">
    </testcase>
  </testsuite>
  <testsuite name="AdminPasswordChangeForm" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:58" time="0.22" tests="1">
    <testcase classname="AdminPasswordChangeForm renders correctly" name="AdminPasswordChangeForm renders correctly" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="fromFilepathToRelativeURL" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:58" time="0.341" tests="16">
    <testcase classname="fromFilepathToRelativeURL it calculates relative paths correctly" name="fromFilepathToRelativeURL it calculates relative paths correctly" time="0.001">
    </testcase>
    <testcase classname="fromFilepathToRelativeURL it calculates absolute paths correctly removing source root" name="fromFilepathToRelativeURL it calculates absolute paths correctly removing source root" time="0.001">
    </testcase>
    <testcase classname="fromFilepathToRelativeURL it calculates absolute paths correctly with windows path" name="fromFilepathToRelativeURL it calculates absolute paths correctly with windows path" time="0">
    </testcase>
    <testcase classname="fromFilepathToRelativeURL it calculates absolute paths correctly with windows path removing source route" name="fromFilepathToRelativeURL it calculates absolute paths correctly with windows path removing source route" time="0.001">
    </testcase>
    <testcase classname="fromFilepathToRelativeURL it calculates relative paths correctly with windows universal naming convention" name="fromFilepathToRelativeURL it calculates relative paths correctly with windows universal naming convention" time="0">
    </testcase>
    <testcase classname="fromFilepathToRelativeURL it calculates relative paths correctly with windows with windows universal naming convention removing source route" name="fromFilepathToRelativeURL it calculates relative paths correctly with windows with windows universal naming convention removing source route" time="0">
    </testcase>
    <testcase classname="fromFilepathToRelativeURL it calculates relative paths correctly with unix universal naming convention" name="fromFilepathToRelativeURL it calculates relative paths correctly with unix universal naming convention" time="0.001">
    </testcase>
    <testcase classname="fromFilepathToRelativeURL it calculates relative paths correctly with unix with windows universal naming convention removing source route" name="fromFilepathToRelativeURL it calculates relative paths correctly with unix with windows universal naming convention removing source route" time="0">
    </testcase>
    <testcase classname="fromFilepathToRelativeURL it returns null if an absolute path does not start with source root" name="fromFilepathToRelativeURL it returns null if an absolute path does not start with source root" time="0">
    </testcase>
    <testcase classname="fromFilepathToRelativeURL it returns null if inputs are invalid" name="fromFilepathToRelativeURL it returns null if inputs are invalid" time="0.001">
    </testcase>
    <testcase classname="fromFilepathToRelativeURL it calculates the line numbers correctly in absolute paths" name="fromFilepathToRelativeURL it calculates the line numbers correctly in absolute paths" time="0">
    </testcase>
    <testcase classname="fromFilepathToRelativeURL it calculates the line numbers correctly in relative paths" name="fromFilepathToRelativeURL it calculates the line numbers correctly in relative paths" time="0.004">
    </testcase>
    <testcase classname="fromFilepathToRelativeURL it is case insensitive for windows paths" name="fromFilepathToRelativeURL it is case insensitive for windows paths" time="0">
    </testcase>
    <testcase classname="fromGithubFilepathUrlToScopeFilepathUrl it calculates relative paths correctly" name="fromGithubFilepathUrlToScopeFilepathUrl it calculates relative paths correctly" time="0.001">
    </testcase>
    <testcase classname="getSourceCodeSegmentFromFrame should ignore source root on missing file path" name="getSourceCodeSegmentFromFrame should ignore source root on missing file path" time="0.001">
    </testcase>
    <testcase classname="getSourceCodeSegmentFromStackTrace should ignore source root on missing file path" name="getSourceCodeSegmentFromStackTrace should ignore source root on missing file path" time="0">
    </testcase>
  </testsuite>
  <testsuite name="PrivateRoute" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:57" time="1.103" tests="4">
    <testcase classname="PrivateRoute should redirect with unauthorized user" name="PrivateRoute should redirect with unauthorized user" time="0.005">
    </testcase>
    <testcase classname="PrivateRoute should render subcomponent with logged user" name="PrivateRoute should render subcomponent with logged user" time="0.007">
    </testcase>
    <testcase classname="AdminRoute should redirect with regular user" name="AdminRoute should redirect with regular user" time="0.006">
    </testcase>
    <testcase classname="AdminRoute should render subcomponent with admin user" name="AdminRoute should render subcomponent with admin user" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="getBaseDomainFromUrl" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:58" time="0.178" tests="3">
    <testcase classname="getBaseDomainFromUrl should return the first 2 segments of the domain for a given url" name="getBaseDomainFromUrl should return the first 2 segments of the domain for a given url" time="0.001">
    </testcase>
    <testcase classname="getBaseDomainFromUrl should return same protocol" name="getBaseDomainFromUrl should return same protocol" time="0.001">
    </testcase>
    <testcase classname="getBaseDomainFromUrl should return a empty string for a malformed url" name="getBaseDomainFromUrl should return a empty string for a malformed url" time="0">
    </testcase>
  </testsuite>
  <testsuite name="LoadingSpinner" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:58" time="0.21" tests="1">
    <testcase classname="LoadingSpinner renders correctly" name="LoadingSpinner renders correctly" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="format funcitons" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:58" time="0.231" tests="8">
    <testcase classname="format funcitons formatHistogram formats correctly when no filter is input" name="format funcitons formatHistogram formats correctly when no filter is input" time="0.002">
    </testcase>
    <testcase classname="format funcitons formatHistogram formats correctly when a filter is input" name="format funcitons formatHistogram formats correctly when a filter is input" time="0.001">
    </testcase>
    <testcase classname="format funcitons formatHistogram works for a single point" name="format funcitons formatHistogram works for a single point" time="0.001">
    </testcase>
    <testcase classname="format funcitons formatHistogram does not break with invalid data" name="format funcitons formatHistogram does not break with invalid data" time="0.001">
    </testcase>
    <testcase classname="format funcitons formatDuration formats duration correctly" name="format funcitons formatDuration formats duration correctly" time="0.009">
    </testcase>
    <testcase classname="format funcitons formatDuration does not break with invalid input" name="format funcitons formatDuration does not break with invalid input" time="0.001">
    </testcase>
    <testcase classname="format funcitons getDurationDisplayUnits returns units correctly" name="format funcitons getDurationDisplayUnits returns units correctly" time="0.002">
    </testcase>
    <testcase classname="format funcitons getDurationDisplayUnits does not break with invalid input" name="format funcitons getDurationDisplayUnits does not break with invalid input" time="0">
    </testcase>
  </testsuite>
  <testsuite name="default branch name" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:58" time="0.221" tests="7">
    <testcase classname="default branch name should return unknown for empty argument" name="default branch name should return unknown for empty argument" time="0.001">
    </testcase>
    <testcase classname="default branch name should return master branch if present" name="default branch name should return master branch if present" time="0.001">
    </testcase>
    <testcase classname="default branch name should return the first branch if master is not present" name="default branch name should return the first branch if master is not present" time="0">
    </testcase>
    <testcase classname="default branch should return null for empty argument" name="default branch should return null for empty argument" time="0.001">
    </testcase>
    <testcase classname="default branch should return master branch if present" name="default branch should return master branch if present" time="0">
    </testcase>
    <testcase classname="default branch should return repository default branch if present" name="default branch should return repository default branch if present" time="0">
    </testcase>
    <testcase classname="default branch should return the first branch if master is not present" name="default branch should return the first branch if master is not present" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="formatStatusCode" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:58" time="0.179" tests="4">
    <testcase classname="formatStatusCode it does not transform a valid http status number" name="formatStatusCode it does not transform a valid http status number" time="0">
    </testcase>
    <testcase classname="formatStatusCode it transforms a valid http status string into a number" name="formatStatusCode it transforms a valid http status string into a number" time="0">
    </testcase>
    <testcase classname="formatStatusCode it does not break with invalid values" name="formatStatusCode it does not break with invalid values" time="0.001">
    </testcase>
    <testcase classname="formatStatusCode it does not ignore unrecognized class, as indicated by the first digit" name="formatStatusCode it does not ignore unrecognized class, as indicated by the first digit" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Wave" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:58" time="0.19" tests="1">
    <testcase classname="Wave renders correctly" name="Wave renders correctly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getGHChecksResult" errors="0" failures="0" skipped="0" timestamp="2020-02-11T09:26:58" time="0.131" tests="5">
    <testcase classname="getGHChecksResult returns failure if any of the checks is a failure" name="getGHChecksResult returns failure if any of the checks is a failure" time="0.001">
    </testcase>
    <testcase classname="getGHChecksResult returns in progress if at least one check is in progress" name="getGHChecksResult returns in progress if at least one check is in progress" time="0">
    </testcase>
    <testcase classname="getGHChecksResult returns success if there is at least one success and no in progress or failure" name="getGHChecksResult returns success if there is at least one success and no in progress or failure" time="0.001">
    </testcase>
    <testcase classname="getGHChecksResult returns neutral for empty checks" name="getGHChecksResult returns neutral for empty checks" time="0">
    </testcase>
    <testcase classname="getGHChecksResult returns neutral for invalid checks" name="getGHChecksResult returns neutral for invalid checks" time="0.001">
    </testcase>
  </testsuite>
</testsuites>
