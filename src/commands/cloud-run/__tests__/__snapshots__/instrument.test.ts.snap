// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InstrumentCommand snapshot tests interactive mode 1`] = `
"
üê∂ Instrumenting Cloud Run service(s)

[!] No DD_SERVICE env var found. Will default to the service name.
‚úî Required flags verified

üîë Verifying GCP credentials...
‚úî GCP credentials verified!


‚¨áÔ∏è Fetching existing service configurations from Cloud Run...

üöÄ Instrumenting Cloud Run services with sidecar...
  {
    "name": "projects/interactive-project/locations/us-west1/services/interactive-service",
    "template": {
      "containers": [
        {
          "env": [
            {
              "name": "NODE_ENV",
              "value": "production"
+           },
+           {
+             "name": "DD_LOGS_INJECTION",
+             "value": "true"
+           },
+           {
+             "name": "DD_SERVICE",
+             "value": "interactive-service"
+           },
+           {
+             "name": "DD_API_KEY",
+             "value": "PLACEHOLDER"
            }
          ],
          "image": "gcr.io/test-project/test-app:latest",
          "name": "main-app",
-         "volumeMounts": []
+         "volumeMounts": [
+           {
+             "mountPath": "/shared-volume",
+             "name": "shared-volume"
+           }
+         ]
+       },
+       {
+         "env": [
+           {
+             "name": "DD_SITE",
+             "value": "datadoghq.com"
+           },
+           {
+             "name": "DD_LOGS_INJECTION",
+             "value": "true"
+           },
+           {
+             "name": "DD_TRACE_ENABLED",
+             "value": "true"
+           },
+           {
+             "name": "DD_HEALTH_PORT",
+             "value": "5555"
+           },
+           {
+             "name": "DD_API_KEY",
+             "value": "PLACEHOLDER"
+           },
+           {
+             "name": "DD_SERVICE",
+             "value": "interactive-service"
+           },
+           {
+             "name": "DD_TAGS",
+             "value": "git.commit.sha:1be168ff837f043bde17c0314341c84271047b31,git.repository_url:git.repository_url:github.com/datadog/test.git"
+           },
+           {
+             "name": "DD_SERVERLESS_LOG_PATH",
+             "value": "/shared-volume/logs/*.log"
+           }
+         ],
+         "image": "gcr.io/datadoghq/serverless-init:latest",
+         "name": "datadog-sidecar",
+         "resources": {
+           "limits": {
+             "cpu": "1",
+             "memory": "512Mi"
+           }
+         },
+         "startupProbe": {
+           "failureThreshold": 3,
+           "initialDelaySeconds": 0,
+           "periodSeconds": 10,
+           "tcpSocket": {
+             "port": "5555"
+           },
+           "timeoutSeconds": 1
+         },
+         "volumeMounts": [
+           {
+             "mountPath": "/shared-volume",
+             "name": "shared-volume"
+           }
+         ]
        }
      ],
-     "revision": "test-service-v1",
-     "volumes": []
+     "volumes": [
+       {
+         "emptyDir": {
+           "medium": 1
+         },
+         "name": "shared-volume"
+       }
+     ]
    }
  }
‚úÖ Cloud Run instrumentation completed successfully!
"
`;

exports[`InstrumentCommand snapshot tests prints dry run data with basic flags 1`] = `
"
[Dry Run] üê∂ Instrumenting Cloud Run service(s)

[!] No DD_SERVICE env var found. Will default to the service name.
‚úî Required flags verified

üîë Verifying GCP credentials...
‚úî GCP credentials verified!


[Dry Run] ‚¨áÔ∏è Fetching existing service configurations from Cloud Run...

[Dry Run] üöÄ Instrumenting Cloud Run services with sidecar...
  {
    "name": "projects/test-project/locations/us-central1/services/test-service",
    "template": {
      "containers": [
        {
          "env": [
            {
              "name": "NODE_ENV",
              "value": "production"
+           },
+           {
+             "name": "DD_LOGS_INJECTION",
+             "value": "true"
+           },
+           {
+             "name": "DD_SERVICE",
+             "value": "test-service"
+           },
+           {
+             "name": "DD_API_KEY",
+             "value": "PLACEHOLDER"
            }
          ],
          "image": "gcr.io/test-project/test-app:latest",
          "name": "main-app",
-         "volumeMounts": []
+         "volumeMounts": [
+           {
+             "mountPath": "/shared-volume",
+             "name": "shared-volume"
+           }
+         ]
+       },
+       {
+         "env": [
+           {
+             "name": "DD_SITE",
+             "value": "datadoghq.com"
+           },
+           {
+             "name": "DD_LOGS_INJECTION",
+             "value": "true"
+           },
+           {
+             "name": "DD_TRACE_ENABLED",
+             "value": "true"
+           },
+           {
+             "name": "DD_HEALTH_PORT",
+             "value": "5555"
+           },
+           {
+             "name": "DD_API_KEY",
+             "value": "PLACEHOLDER"
+           },
+           {
+             "name": "DD_SERVICE",
+             "value": "test-service"
+           },
+           {
+             "name": "DD_ENV",
+             "value": "staging"
+           },
+           {
+             "name": "DD_VERSION",
+             "value": "1.0.0"
+           },
+           {
+             "name": "DD_TAGS",
+             "value": "team:backend,service:api,git.commit.sha:1be168ff837f043bde17c0314341c84271047b31,git.repository_url:git.repository_url:github.com/datadog/test.git"
+           },
+           {
+             "name": "DD_SERVERLESS_LOG_PATH",
+             "value": "/shared-volume/logs/*.log"
+           }
+         ],
+         "image": "gcr.io/datadoghq/serverless-init:latest",
+         "name": "datadog-sidecar",
+         "resources": {
+           "limits": {
+             "cpu": "1",
+             "memory": "512Mi"
+           }
+         },
+         "startupProbe": {
+           "failureThreshold": 3,
+           "initialDelaySeconds": 0,
+           "periodSeconds": 10,
+           "tcpSocket": {
+             "port": "5555"
+           },
+           "timeoutSeconds": 1
+         },
+         "volumeMounts": [
+           {
+             "mountPath": "/shared-volume",
+             "name": "shared-volume"
+           }
+         ]
        }
      ],
-     "revision": "test-service-v1",
-     "volumes": []
+     "volumes": [
+       {
+         "emptyDir": {
+           "medium": 1
+         },
+         "name": "shared-volume"
+       }
+     ]
    }
  }

[Dry Run] Would have updated service test-service with the above changes.
"
`;
