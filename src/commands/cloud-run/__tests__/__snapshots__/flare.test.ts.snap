// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cloud-run flare checkAuthentication prints instructions on how to authenticate when authentication fails 1`] = `
"
üê∂ Generating Cloud Run flare to send your configuration to Datadog...

üîë Verifying GCP credentials...

[Error] Unable to authenticate with GCP.

To authenticate with GCP, please follow these steps:
1. If you haven't already, install the Google Cloud SDK: https://cloud.google.com/sdk/docs/install
2. Run "gcloud auth application-default login" and follow the prompts in your browser to log in.
3. After logging in, run the \`datadog-ci cloud-run flare\` command again.
"
`;

exports[`cloud-run flare generateInsightsFile prints a warning when generateInsightsFile() errors 1`] = `
"
üê∂ Generating Cloud Run flare to send your configuration to Datadog...

üîë Verifying GCP credentials...
GCP credentials verified!

üîç Fetching service configuration...

{
  name: 'projects/mock-project/locations/us-east1/services/mock-service',
  uid: 'abc1234-def5678',
  uri: 'https://mock-service-abc12345-ue.a.run.app',
  containers: [
    {
      env: [
        {
          name: 'DD_API_KEY',
          value: '02**********33bd',
          values: 'value'
        },
        { name: 'DD_TRACE_ENABLED', value: 'true', values: 'value' },
        { name: 'DD_SITE', value: 'datad0g.com', values: 'value' }
      ],
      image: 'gcr.io/datadog-sandbox/nicholas-hulston-docker-test'
    }
  ]
}
(This is a summary of the configuration. The full configuration will be saved in "service_config.json".)

üìÅ Searching for project files in current directory...
[!] No project files found.


[!] No additional files specified.

üåß Fetching recent revisions...
‚Ä¢ Found 5 revisions

üíæ Saving files to mock-folder/.datadog-ci...
‚Ä¢ Saved function config to ./service_config.json
[!] Unable to create INSIGHTS.md file. Some error


üöÄ Sending to Datadog Support...

‚úÖ Successfully sent flare file to Datadog Support!
"
`;

exports[`cloud-run flare generateInsightsFile should call writeFile with correct content when isDryRun is false 1`] = `
"# Flare Insights

_Autogenerated file from \`cloud-run flare\`_  

## Cloud Run Service Configuration
**Service Name**: \`mock-service\`  
**Location**: \`us-east1\`  
**Project**: \`mock-project\`  
**Description**: \`description\`  
**URI**: \`https://mock-service-abc12345-ue.a.run.app\`

**Environment Variables** (gcr.io/datadog-sandbox/nicholas-hulston-docker-test):
- \`DD_API_KEY\`: \`02**********33bd\`
- \`DD_TRACE_ENABLED\`: \`true\`
- \`DD_SITE\`: \`datad0g.com\`

**Labels**:
- \`someLabel\`: \`someValue\`
- \`anotherLabel\`: \`anotherValue\`

**Recent Revisions**:
- \`service-00005-abc\` Deployed on 1970-01-01 00:01:40
- \`service-00004-def\` Deployed on 1970-01-01 00:01:40
- \`service-00003-ghi\` Deployed on 1970-01-01 00:01:40
- \`service-00002-jkl\` Deployed on 1970-01-01 00:01:40
- \`service-00001-mno\` Deployed on 1970-01-01 00:01:40

 ## CLI
**Run Location**: \`mock-folder\`  
**CLI Version**: \`1.0-mock-version\`  
**Timestamp**: \`2023-01-01 00:00:00.000 UTC\`  "
`;

exports[`cloud-run flare generateInsightsFile should call writeFile with correct content when isDryRun is true 1`] = `
"# Flare Insights

_Autogenerated file from \`cloud-run flare\`_  
_This command was run in dry mode._

## Cloud Run Service Configuration
**Service Name**: \`mock-service\`  
**Location**: \`us-east1\`  
**Project**: \`mock-project\`  
**Description**: \`description\`  
**URI**: \`https://mock-service-abc12345-ue.a.run.app\`

**Environment Variables** (gcr.io/datadog-sandbox/nicholas-hulston-docker-test):
- \`DD_API_KEY\`: \`02**********33bd\`
- \`DD_TRACE_ENABLED\`: \`true\`
- \`DD_SITE\`: \`datad0g.com\`

**Labels**:
- \`someLabel\`: \`someValue\`
- \`anotherLabel\`: \`anotherValue\`

**Recent Revisions**:
- \`service-00005-abc\` Deployed on 1970-01-01 00:01:40
- \`service-00004-def\` Deployed on 1970-01-01 00:01:40
- \`service-00003-ghi\` Deployed on 1970-01-01 00:01:40
- \`service-00002-jkl\` Deployed on 1970-01-01 00:01:40
- \`service-00001-mno\` Deployed on 1970-01-01 00:01:40

 ## CLI
**Run Location**: \`mock-folder\`  
**CLI Version**: \`1.0-mock-version\`  
**Timestamp**: \`2023-01-01 00:00:00.000 UTC\`  "
`;

exports[`cloud-run flare generateInsightsFile splits environment variables when there are multiple containers 1`] = `
"# Flare Insights

_Autogenerated file from \`cloud-run flare\`_  

## Cloud Run Service Configuration
**Service Name**: \`mock-service\`  
**Location**: \`us-east1\`  
**Project**: \`mock-project\`  
**Description**: \`description\`  
**URI**: \`https://mock-service-abc12345-ue.a.run.app\`

**Environment Variables** (gcr.io/datadog-sandbox/nicholas-hulston-docker-test):
- \`DD_API_KEY\`: \`02**********33bd\`
- \`DD_TRACE_ENABLED\`: \`true\`
- \`DD_SITE\`: \`datad0g.com\`

**Environment Variables** (gcr.io/datadog-sandbox/another-container):
- \`DD_API_KEY\`: \`02**********33bd\`

**Labels**:
- \`someLabel\`: \`someValue\`
- \`anotherLabel\`: \`anotherValue\`

**Recent Revisions**:
- \`service-00005-abc\` Deployed on 1970-01-01 00:01:40
- \`service-00004-def\` Deployed on 1970-01-01 00:01:40
- \`service-00003-ghi\` Deployed on 1970-01-01 00:01:40
- \`service-00002-jkl\` Deployed on 1970-01-01 00:01:40
- \`service-00001-mno\` Deployed on 1970-01-01 00:01:40

 ## CLI
**Run Location**: \`mock-folder\`  
**CLI Version**: \`1.0-mock-version\`  
**Timestamp**: \`2023-01-01 00:00:00.000 UTC\`  "
`;

exports[`cloud-run flare getCloudRunServiceConfig prints config when running as a dry run 1`] = `
"
[Dry Run] üê∂ Generating Cloud Run flare to send your configuration to Datadog...

üîë Verifying GCP credentials...
GCP credentials verified!

üîç Fetching service configuration...

{
  name: 'projects/mock-project/locations/us-east1/services/mock-service',
  uid: 'abc1234-def5678',
  uri: 'https://mock-service-abc12345-ue.a.run.app',
  containers: [
    {
      env: [
        {
          name: 'DD_API_KEY',
          value: '02**********33bd',
          values: 'value'
        },
        { name: 'DD_TRACE_ENABLED', value: 'true', values: 'value' },
        { name: 'DD_SITE', value: 'datad0g.com', values: 'value' }
      ],
      image: 'gcr.io/datadog-sandbox/nicholas-hulston-docker-test'
    }
  ]
}
(This is a summary of the configuration. The full configuration will be saved in "service_config.json".)

üìÅ Searching for project files in current directory...
[!] No project files found.


[!] No additional files specified.

üåß Fetching recent revisions...
‚Ä¢ Found 5 revisions

üíæ Saving files to mock-folder/.datadog-ci...
‚Ä¢ Saved function config to ./service_config.json
‚Ä¢ Saved insights file to ./INSIGHTS.md

üö´ The flare files were not sent because the command was executed in dry run mode.
‚ÑπÔ∏è Your output files are located at: mock-folder/.datadog-ci

"
`;

exports[`cloud-run flare getCloudRunServiceConfig stops and prints error when getCloudRunServiceConfig fails 1`] = `
"
üê∂ Generating Cloud Run flare to send your configuration to Datadog...

üîë Verifying GCP credentials...
GCP credentials verified!

üîç Fetching service configuration...
[Error] Unable to fetch service configuration: MOCK ERROR: Some API error
"
`;

exports[`cloud-run flare getLogs handles httpRequest payload correctly 1`] = `
[
  {
    "logName": "mock-logname",
    "message": ""GET 200. responseSize: 1.27 KB. latency: 1500 ms. requestUrl: /test-endpoint"",
    "severity": "DEFAULT",
    "timestamp": "2023-07-28 00:00:00",
  },
]
`;

exports[`cloud-run flare getLogs handles textPayload correctly 1`] = `
[
  {
    "logName": "mock-logname",
    "message": ""Some text payload"",
    "severity": "DEFAULT",
    "timestamp": "2023-07-28 00:00:00",
  },
]
`;

exports[`cloud-run flare getLogs handles when a log is an HTTP request and has a textPayload 1`] = `
[
  {
    "logName": "mock-logname",
    "message": ""Test log 1"",
    "severity": "DEFAULT",
    "timestamp": "2023-07-28 00:00:00",
  },
  {
    "logName": "mock-logname",
    "message": ""some text payload. 504. responseSize: 0 Bytes. latency: unknown ms. requestUrl: "",
    "severity": "",
    "timestamp": "2023-07-28 00:00:01",
  },
]
`;

exports[`cloud-run flare getLogs throws an error when \`getEntries\` fails 1`] = `[Error: getEntries failed]`;

exports[`cloud-run flare maskConfig should mask a Cloud Run config correctly 1`] = `
{
  "description": "description",
  "labels": {
    "anotherLabel": "anotherValue",
    "someLabel": "someValue",
  },
  "name": "projects/mock-project/locations/us-east1/services/mock-service",
  "template": {
    "containers": [
      {
        "env": [
          {
            "name": "DD_API_KEY",
            "value": "02**********33bd",
            "values": "value",
          },
          {
            "name": "DD_TRACE_ENABLED",
            "value": "true",
            "values": "value",
          },
          {
            "name": "DD_SITE",
            "value": "datad0g.com",
            "values": "value",
          },
        ],
        "image": "gcr.io/datadog-sandbox/nicholas-hulston-docker-test",
      },
    ],
    "someData": "data",
  },
  "uid": "abc1234-def5678",
  "uri": "https://mock-service-abc12345-ue.a.run.app",
}
`;

exports[`cloud-run flare maskConfig should not modify config if env vars are missing 1`] = `
{
  "description": "description",
  "labels": {
    "anotherLabel": "anotherValue",
    "someLabel": "someValue",
  },
  "name": "projects/mock-project/locations/us-east1/services/mock-service",
  "template": {
    "someData": "data",
  },
  "uid": "abc1234-def5678",
  "uri": "https://mock-service-abc12345-ue.a.run.app",
}
`;

exports[`cloud-run flare prints correct headers prints dry-run header 1`] = `
"
[Dry Run] üê∂ Generating Cloud Run flare to send your configuration to Datadog...
[Error] No service specified. [-s,--service]
[Error] No project specified. [-p,--project]
[Error] No region specified. [-r,--region]
[Error] No case ID specified. [-c,--case-id]
[Error] No email specified. [-e,--email]
"
`;

exports[`cloud-run flare prints correct headers prints non-dry-run header 1`] = `
"
üê∂ Generating Cloud Run flare to send your configuration to Datadog...
[Error] No service specified. [-s,--service]
[Error] No project specified. [-p,--project]
[Error] No region specified. [-r,--region]
[Error] No case ID specified. [-c,--case-id]
[Error] No email specified. [-e,--email]
"
`;

exports[`cloud-run flare prompts for confirmation before sending does not send when user answers prompt with no 1`] = `
"
üê∂ Generating Cloud Run flare to send your configuration to Datadog...

üîë Verifying GCP credentials...
GCP credentials verified!

üîç Fetching service configuration...

{
  name: 'projects/mock-project/locations/us-east1/services/mock-service',
  uid: 'abc1234-def5678',
  uri: 'https://mock-service-abc12345-ue.a.run.app',
  containers: [
    {
      env: [
        {
          name: 'DD_API_KEY',
          value: '02**********33bd',
          values: 'value'
        },
        { name: 'DD_TRACE_ENABLED', value: 'true', values: 'value' },
        { name: 'DD_SITE', value: 'datad0g.com', values: 'value' }
      ],
      image: 'gcr.io/datadog-sandbox/nicholas-hulston-docker-test'
    }
  ]
}
(This is a summary of the configuration. The full configuration will be saved in "service_config.json".)

üìÅ Searching for project files in current directory...
[!] No project files found.


üåß Fetching recent revisions...
‚Ä¢ Found 5 revisions

üíæ Saving files to mock-folder/.datadog-ci...
‚Ä¢ Saved function config to ./service_config.json
‚Ä¢ Saved insights file to ./INSIGHTS.md


üö´ The flare files were not sent based on your selection.
‚ÑπÔ∏è Your output files are located at: mock-folder/.datadog-ci

"
`;

exports[`cloud-run flare prompts for confirmation before sending sends when user answers prompt with yes 1`] = `
"
üê∂ Generating Cloud Run flare to send your configuration to Datadog...

üîë Verifying GCP credentials...
GCP credentials verified!

üîç Fetching service configuration...

{
  name: 'projects/mock-project/locations/us-east1/services/mock-service',
  uid: 'abc1234-def5678',
  uri: 'https://mock-service-abc12345-ue.a.run.app',
  containers: [
    {
      env: [
        {
          name: 'DD_API_KEY',
          value: '02**********33bd',
          values: 'value'
        },
        { name: 'DD_TRACE_ENABLED', value: 'true', values: 'value' },
        { name: 'DD_SITE', value: 'datad0g.com', values: 'value' }
      ],
      image: 'gcr.io/datadog-sandbox/nicholas-hulston-docker-test'
    }
  ]
}
(This is a summary of the configuration. The full configuration will be saved in "service_config.json".)

üìÅ Searching for project files in current directory...
[!] No project files found.


[!] No additional files specified.

üåß Fetching recent revisions...
‚Ä¢ Found 5 revisions

üíæ Saving files to mock-folder/.datadog-ci...
‚Ä¢ Saved function config to ./service_config.json
‚Ä¢ Saved insights file to ./INSIGHTS.md


üöÄ Sending to Datadog Support...

‚úÖ Successfully sent flare file to Datadog Support!
"
`;

exports[`cloud-run flare summarizeConfig 1`] = `
{
  "containers": [
    {
      "env": [
        {
          "name": "DD_API_KEY",
          "value": "02aeb762fff59ac0d5ad1536cd9633bd",
          "values": "value",
        },
        {
          "name": "DD_TRACE_ENABLED",
          "value": "true",
          "values": "value",
        },
        {
          "name": "DD_SITE",
          "value": "datad0g.com",
          "values": "value",
        },
      ],
      "image": "gcr.io/datadog-sandbox/nicholas-hulston-docker-test",
    },
  ],
  "name": "projects/mock-project/locations/us-east1/services/mock-service",
  "uid": "abc1234-def5678",
  "uri": "https://mock-service-abc12345-ue.a.run.app",
}
`;

exports[`cloud-run flare validates required flags prints error when no API key in env variables 1`] = `
"
üê∂ Generating Cloud Run flare to send your configuration to Datadog...
[Error] No Datadog API key specified. Set an API key with the DATADOG_API_KEY environment variable.
"
`;

exports[`cloud-run flare validates required flags prints error when no case ID specified 1`] = `
"
üê∂ Generating Cloud Run flare to send your configuration to Datadog...
[Error] No case ID specified. [-c,--case-id]
"
`;

exports[`cloud-run flare validates required flags prints error when no email specified 1`] = `
"
üê∂ Generating Cloud Run flare to send your configuration to Datadog...
[Error] No email specified. [-e,--email]
"
`;

exports[`cloud-run flare validates required flags prints error when no project specified 1`] = `
"
üê∂ Generating Cloud Run flare to send your configuration to Datadog...
[Error] No project specified. [-p,--project]
"
`;

exports[`cloud-run flare validates required flags prints error when no region specified 1`] = `
"
üê∂ Generating Cloud Run flare to send your configuration to Datadog...
[Error] No region specified. [-r,--region]
"
`;

exports[`cloud-run flare validates required flags prints error when no service specified 1`] = `
"
üê∂ Generating Cloud Run flare to send your configuration to Datadog...
[Error] No service specified. [-s,--service]
"
`;

exports[`cloud-run flare validates required flags runs successfully with all required options specified 1`] = `
"
üê∂ Generating Cloud Run flare to send your configuration to Datadog...

üîë Verifying GCP credentials...
GCP credentials verified!

üîç Fetching service configuration...

{
  name: 'projects/mock-project/locations/us-east1/services/mock-service',
  uid: 'abc1234-def5678',
  uri: 'https://mock-service-abc12345-ue.a.run.app',
  containers: [
    {
      env: [
        {
          name: 'DD_API_KEY',
          value: '02**********33bd',
          values: 'value'
        },
        { name: 'DD_TRACE_ENABLED', value: 'true', values: 'value' },
        { name: 'DD_SITE', value: 'datad0g.com', values: 'value' }
      ],
      image: 'gcr.io/datadog-sandbox/nicholas-hulston-docker-test'
    }
  ]
}
(This is a summary of the configuration. The full configuration will be saved in "service_config.json".)

üìÅ Searching for project files in current directory...
[!] No project files found.


[!] No additional files specified.

üåß Fetching recent revisions...
‚Ä¢ Found 5 revisions

üíæ Saving files to mock-folder/.datadog-ci...
‚Ä¢ Saved function config to ./service_config.json
‚Ä¢ Saved insights file to ./INSIGHTS.md


üöÄ Sending to Datadog Support...

‚úÖ Successfully sent flare file to Datadog Support!
"
`;

exports[`cloud-run flare validates required flags uses API key ENV variable and runs as expected 1`] = `
"
üê∂ Generating Cloud Run flare to send your configuration to Datadog...

üîë Verifying GCP credentials...
GCP credentials verified!

üîç Fetching service configuration...

{
  name: 'projects/mock-project/locations/us-east1/services/mock-service',
  uid: 'abc1234-def5678',
  uri: 'https://mock-service-abc12345-ue.a.run.app',
  containers: [
    {
      env: [
        {
          name: 'DD_API_KEY',
          value: '02**********33bd',
          values: 'value'
        },
        { name: 'DD_TRACE_ENABLED', value: 'true', values: 'value' },
        { name: 'DD_SITE', value: 'datad0g.com', values: 'value' }
      ],
      image: 'gcr.io/datadog-sandbox/nicholas-hulston-docker-test'
    }
  ]
}
(This is a summary of the configuration. The full configuration will be saved in "service_config.json".)

üìÅ Searching for project files in current directory...
[!] No project files found.


[!] No additional files specified.

üåß Fetching recent revisions...
‚Ä¢ Found 5 revisions

üíæ Saving files to mock-folder/.datadog-ci...
‚Ä¢ Saved function config to ./service_config.json
‚Ä¢ Saved insights file to ./INSIGHTS.md


üöÄ Sending to Datadog Support...

‚úÖ Successfully sent flare file to Datadog Support!
"
`;

exports[`cloud-run flare validates required flags uses API key ENV variable and runs as expected 2`] = `
"
üê∂ Generating Cloud Run flare to send your configuration to Datadog...

üîë Verifying GCP credentials...
GCP credentials verified!

üîç Fetching service configuration...

{
  name: 'projects/mock-project/locations/us-east1/services/mock-service',
  uid: 'abc1234-def5678',
  uri: 'https://mock-service-abc12345-ue.a.run.app',
  containers: [
    {
      env: [
        {
          name: 'DD_API_KEY',
          value: '02**********33bd',
          values: 'value'
        },
        { name: 'DD_TRACE_ENABLED', value: 'true', values: 'value' },
        { name: 'DD_SITE', value: 'datad0g.com', values: 'value' }
      ],
      image: 'gcr.io/datadog-sandbox/nicholas-hulston-docker-test'
    }
  ]
}
(This is a summary of the configuration. The full configuration will be saved in "service_config.json".)

üìÅ Searching for project files in current directory...
[!] No project files found.


[!] No additional files specified.

üåß Fetching recent revisions...
‚Ä¢ Found 5 revisions

üíæ Saving files to mock-folder/.datadog-ci...
‚Ä¢ Saved function config to ./service_config.json
‚Ä¢ Saved insights file to ./INSIGHTS.md


üöÄ Sending to Datadog Support...

‚úÖ Successfully sent flare file to Datadog Support!

üê∂ Generating Cloud Run flare to send your configuration to Datadog...

üîë Verifying GCP credentials...
GCP credentials verified!

üîç Fetching service configuration...

{
  name: 'projects/mock-project/locations/us-east1/services/mock-service',
  uid: 'abc1234-def5678',
  uri: 'https://mock-service-abc12345-ue.a.run.app',
  containers: [
    {
      env: [
        {
          name: 'DD_API_KEY',
          value: '02**********33bd',
          values: 'value'
        },
        { name: 'DD_TRACE_ENABLED', value: 'true', values: 'value' },
        { name: 'DD_SITE', value: 'datad0g.com', values: 'value' }
      ],
      image: 'gcr.io/datadog-sandbox/nicholas-hulston-docker-test'
    }
  ]
}
(This is a summary of the configuration. The full configuration will be saved in "service_config.json".)

üìÅ Searching for project files in current directory...
[!] No project files found.


[!] No additional files specified.

üåß Fetching recent revisions...
‚Ä¢ Found 5 revisions

üíæ Saving files to mock-folder/.datadog-ci...
‚Ä¢ Saved function config to ./service_config.json
‚Ä¢ Saved insights file to ./INSIGHTS.md


üöÄ Sending to Datadog Support...

‚úÖ Successfully sent flare file to Datadog Support!
"
`;
